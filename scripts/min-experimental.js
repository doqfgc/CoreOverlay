// minified.js config start -- use this comment to re-create a configuration in the Builder
// - Only sections always, amdsupport, animate, dial, dollardollar, 
// - error, get, loop, request, set, toggle.


// WARNING! This file is autogenerated from minified-master.js and others.

/*
 * Minified.js - Lightweight Client-Side JavaScript Library (full package)
 * Version: Version 2014 beta 5 b2
 * 
 * Public Domain. Use, modify and distribute it any way you like. No attribution required.
 * To the extent possible under law, Tim Jansen has waived all copyright and related or neighboring rights to Minified.
 * Please see http://creativecommons.org/publicdomain/zero/1.0/.
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 * 
 * Contains code based on https://github.com/douglascrockford/JSON-js (also Public Domain).
 *
 * https://github.com/timjansen/minified.js
 */
// ==ClosureCompiler==
// @output_file_name minified.js
// @compilation_level ADVANCED_OPTIMIZATIONS
// ==/ClosureCompiler==

	/*$
	 * @id ALL
	 * @doc no
	 * @required
	 * This id allows identifying whether both Web and Util are available.
	 */

///#snippet commonAmdStart

/*$
 * @id require
 * @name require()
 * @syntax require(name)
 * @group OPTIONS
 * @module WEB, UTIL
 * Returns a reference to a module. If you do not use an AMD loader to load Minified, just call <var>require()</var> with the
 * argument 'minified' to get a reference to Minified. You can also access all modules defined using ##define().
 * 
 * If you do use an AMD loader, Minified will not define this function and you can use the AMD loader to obtain the
 * reference to Minified.
 * Minified's version of <var>require</var> is very simple and will only support Minified and other libraries designed
 * for Minfied, but <strong>no real AMD libraries</strong>. If you need to work with libraries requiring AMD, you need a real AMD loader.
 * 
 * @param name the name of the module to request. Minified is available as 'minified'.
 * @return the reference to the module. Use the name 'minified' to get Minified. You can also access any modules defined using
 * ##define(). If the name is unknown, it returns <var>undefined</var>.
 * 
 * @see ##define() allows you to define modules that can be obtained using <var>require()</var>.
 */

/*$
 * @id define
 * @name define()
 * @syntax define(name, factoryFunction)
 * @group OPTIONS
 * @module WEB, UTIL
 * Defines a module that can be returned by ##require(), in case you don't have a AMD loader. If you have a AMD loader before you include Minified,
 * <var>define()</var> will not be set and you can use the AMD loader's (more powerful) variant.
 *
 * Minified's versions of <var>require()</var> and <var>define()</var> are very simple and can not resolve things like circular references.
 * Also, they are not AMD-compatible and only useful for simple modules. If you need to work with real AMD libraries that are not written
 * for Minified, you need a real AMD loader.
 * 
 * @example Creates a simple module and uses it:
 * <pre>
 * define('makeGreen', function(require) {
 *     var MINI = require('minified'), $ = MINI.$; // obtain own ref to Minified
 *     return function(list) {
 *         $(list).set({$color: '#0f0', $backgroundColor: '#050'});
 *     });
 * });
 * 
 * var makeGreen = require('makeGreen');
 * makeGreen('.notGreenEnough');
 * </pre>
 * 
 * @param name the name of the module to request. In Minified's implementation, only 'minified' is supported.
 * @param factoryFunction is a <code>function(require)</code> will be called the first time the name is defined to obtain the module 
 * 						  reference. It received a reference to ##require() (which is required for AMD backward-compatibility) and 
 * 						  must return the value that is returned by ##require(). The function will only be called once, its result will 
 *                        be cached.
 *                        <dl><dt>require</dt><dd>A reference to ##require(). While you could use <var>require()</var> from the global
 *                        context, this would prevent backward compatibility with AMD.</dd>
 *                        <dt class="returnValue">(callback return value)</dt><dd>The reference to be returned by ##require().</dd></dl>
 *                        
 * @see ##require() can be used to obtain references defined with ##define().                       
 */

/*$
 * @id amdsupport
 * @name AMD stubs
 * @configurable default
 * @group OPTIONS
 * @doc no
 * @module WEB, UTIL
 * If enabled, Minified will create stubs so you can use it without an AMD framework.
 * It requires AMD's <code>define()</code> function.
 */
if (/^u/.test(typeof define)) { // no AMD support available ? define a minimal version
	(function(def){
		var require = this['require'] = function(name) { return def[name]; };
		this['define'] = function(name, f) { def[name] = def[name] || f(require); };
	})({});
}
/*$
 * @stop
 */

define('minified', function() {

///#/snippet commonAmdStart
	///#snippet webVars
	/*$
	 * @id WEB
	 * @doc no
	 * @required
	 * This id allows identifying whether the Web module is available.
	 */

	/**
	 * @const
	 */
	var _window = window;

	/**
	 * @const
	 * @type {!string}
	 */
	var MINIFIED_MAGIC_NODEID = 'Nia';

	/**
	 * @const
	 * @type {!string}
	 */
	var MINIFIED_MAGIC_PREV = 'NiaP';

	var setter = {}, getter = {};

	var idSequence = 1;  // used as node id to identify nodes, and as general id for other maps


	/*$
	 * @id animation_vars
	 * @dependency
	 */
	var animationHandlers = {}; // global map of id->run() currently active
	var animationHandlerCount = 0; // number of active handlers

	/*$
	 * @stop
	 */

	///#/snippet webVars
	///#snippet utilVars
	/*$
	 * @id UTIL
	 * @doc no
	 * @required
	 * This id allows identifying whether the Util module is available.
	 */

	var _null = null;

	/** @const */
	var undef;

	/*$
	 * @stop
	 */

	/** @const */
	var MAX_CACHED_TEMPLATES = 99;
	var templateCache={}; // template -> function
	var templates = [];   // list of MAX_CACHED_TEMPLATES templates

	///#/snippet utilVars
	///#snippet commonFunctions

	/** @param s {?} */
	function toString(s) { 
		return s!=_null ? ''+s : '';
	}
	/**
	 * @param s {?}
	 * @param o {string}
	 */
	function isType(s,o) {
		return typeof s == o;
	}
	/** @param s {?} */
	function isString(s) {
		return isType(s, 'string');
	}
	function isObject(f) {
		return !!f && isType(f, 'object');
	}
	function isNode(n) {
		return n && n['nodeType'];
	}
	function isNumber(n) {
		return isType(n, 'number');
	}
	function isDate(n) {
		return isObject(n) && !!n['getDay'];
	}
	function isBool(n) {
		return n === true || n === false;
	}
	function isValue(n) {
		var type = typeof n;
		return type == 'object' ? !!(n && n['getDay']) : (type == 'string' || type == 'number' || isBool(n));
	}
	function nonOp(v) {
		return v;
	}
	function plusOne(d) { 
		return d+1; 
	}
	function replace(s, regexp, sub) {
		return toString(s).replace(regexp, sub != _null ? sub : '');
	}
	function escapeRegExp(s) {
		return replace(s, /[\\\[\]\/{}()*+?.$|^-]/g, "\\$&");
	}
	function trim(s) {
		return replace(s, /^\s+|\s+$/g);
	}
	function eachObj(obj, cb, ctx) {
		for (var n in obj)
			if (obj.hasOwnProperty(n))
				cb.call(ctx || obj, n, obj[n]);
		return obj;
	} 
	function each(list, cb, ctx) {
		if (list)
			for (var i = 0; i < list.length; i++)
				cb.call(ctx || list, list[i], i);
		return list;
	}
	function filter(list, filterFuncOrObject, ctx) {
		var r = []; 
		var f = isFunction(filterFuncOrObject) ? filterFuncOrObject : function(value) { return filterFuncOrObject != value; };
		each(list, function(value, index) {
			if (f.call(ctx || list, value, index))
				r.push(value);
		});
		return r;
	}
	function collector(iterator, obj, collectFunc, ctx) {
		var result = [];
		iterator(obj, function (a, b) {
			if (isList(a = collectFunc.call(ctx || obj, a, b))) // extreme variable reusing: a is now the callback result
				each(a, function(rr) { result.push(rr); });
			else if (a != _null)
				result.push(a);
		});
		return result;
	}
	function collectObj(obj, collectFunc, ctx) {
		return collector(eachObj, obj, collectFunc, ctx);
	}
	function collect(list, collectFunc, ctx) {
		return collector(each, list, collectFunc, ctx);
	}
	function keyCount(obj) {
		var c = 0;
		eachObj(obj, function(key) { c++; });
		return c;
	}
	function keys(obj) { // use Object.keys? in IE>=9
		var list = [];
		eachObj(obj, function(key) { list.push(key); });
		return list;
	}
	function map(list, mapFunc, ctx) {
		var result = [];
		each(list, function(item, index) {
			result.push(mapFunc.call(ctx || list, item, index));
		});
		return result;
	}
	function startsWith(base, start) {
		if (isList(base)) {
			var s2 = _(start); // convert start as we don't know whether it is a list yet
			return equals(sub(base, 0, s2.length), s2);
		}
		else
			return start != _null && base.substr(0, start.length) == start;
	}
	function endsWith(base, end) {
		if (isList(base)) {
			var e2 = _(end);
			return equals(sub(base, -e2.length), e2) || !e2.length;
		}
		else
			return end != _null && base.substr(base.length - end.length) == end;
	}
	function reverse(list) {
		var len = list.length;
		if (isList(list))
			return new M(map(list, function() { return list[--len]; }));
		else
			return replace(list, /[\s\S]/g, function() { return list.charAt(--len); });
	}
	function toObject(list, value) {
		var obj = {};
		each(list, function(item, index) {
			obj[item] = value;
		});
		return obj;
	}
	function copyObj(from, to) {
		var dest = to || {};
        for (var name in from)
        	dest[name] = from[name];
        return dest;
	}
	function merge(list, target) {
		var o = target;
		for (var i = 0; i < list.length; i++)
			o = copyObj(list[i], o);
		return o;
	}
	function getFindFunc(findFunc) {
		return isFunction(findFunc) ? findFunc : function(obj, index) { if (findFunc === obj) return index; };
	}
	function getFindIndex(list, index, defaultIndex) {
		return index == _null ? defaultIndex : index < 0 ? Math.max(list.length+index, 0) : Math.min(list.length, index);
	}
	function find(list, findFunc, startIndex, endIndex) {
		var f = getFindFunc(findFunc);
		var e = getFindIndex(list, endIndex, list.length);
		var r;
		for (var i = getFindIndex(list, startIndex, 0); i < e; i++)
			if ((r = f.call(list, list[i], i)) != _null)
				return r;
	}
	function findLast(list, findFunc, startIndex, endIndex) {
		var f = getFindFunc(findFunc);
		var e = getFindIndex(list, endIndex, -1);
		var r;
		for (var i = getFindIndex(list, startIndex, list.length-1); i > e; i--)
			if ((r = f.call(list, list[i], i)) != _null)
				return r;
	}
	function sub(list, startIndex, endIndex) {
		var r = [];
		if (list) {
			var e = getFindIndex(list, endIndex, list.length);
			for (var i = getFindIndex(list, startIndex, 0); i < e; i++)
				r.push(list[i]);
		}
		return r;
 	}
	function array(list) {
		return map(list, nonOp);
	}
	function unite(list) {
		return function() {
			return new M(callList(list, arguments));
		};
	}
	function uniq(list) {
		var found = {};
		return filter(list, function(item) {
			if (found[item])
				return false;
			else
				return found[item] = 1;
		});
	}
	function intersection(list, otherList) {
		var keys = toObject(otherList, 1);
		return filter(list, function(item) {
			var r = keys[item];
			keys[item] = 0;
			return r;
		});
	}
	function contains(list, value) { // TODO: can Array.indexOf be used in >IE8?
		for (var i = 0; i < list.length; i++)
			if (list[i] == value)
				return true;
		return false;
	}
	// equals if a and b have the same elements and all are equal. Supports getters.
	function equals(x, y) {
		var a = isFunction(x) ? x() : x;
		var b = isFunction(y) ? y() : y;
		var aKeys;
		if (a == b)
			return true;
		else if (a == _null || b == _null)
			return false;
		else if (isValue(a) || isValue(b))
			return isDate(a) && isDate(b) && +a==+b;
		else if (isList(a)) {
			return (a.length == b.length) &&
				!find(a, function(val, index) {
					if (!equals(val, b[index]))
						return true;
				});
		}
		else {
			return !isList(b) &&
				((aKeys = keys(a)).length == keyCount(b)) && 
				!find(aKeys, function(key) {
						if (!equals(a[key],b[key]))
							return true;
				});
		}
	}

	function call(f, fThisOrArgs, args) {
		if (isFunction(f))
			return f.apply(args && fThisOrArgs, map(args || fThisOrArgs, nonOp));
	}
	function callList(list, fThisOrArgs, args) {
		return map(list, function(f) { return call(f, fThisOrArgs, args);});
	}
	function bind(f, fThis, beforeArgs, afterArgs) {
		return function() {
			return call(f, fThis, collect([beforeArgs, arguments, afterArgs], nonOp));
		};
	}
	function partial(f, beforeArgs, afterArgs) {
		return bind(f, this, beforeArgs, afterArgs);
	}
	function pad(digits, number) {
		var signed = number < 0 ? '-' : '';
		var preDecimal = (signed?-number:number).toFixed(0);
		while (preDecimal.length < digits)
			preDecimal = '0' + preDecimal;
		return signed + preDecimal;
	}

	function processNumCharTemplate(tpl, input, fwd) {
		var inHash;
		var inputPos = 0;
		var rInput = fwd ? input : reverse(input);
		var s = (fwd ? tpl : reverse(tpl)).replace(/./g, function(tplChar) {
			if (tplChar == '0') {
				inHash = false;
				return rInput.charAt(inputPos++) || '0';
			}
			else if (tplChar == '#') {
				inHash = true;
				return rInput.charAt(inputPos++) || '';
			}
			else
				return inHash && !rInput.charAt(inputPos) ? '' : tplChar;
		});
		return fwd ? s : (input.substr(0, input.length - inputPos) + reverse(s));
	}

	function getTimezone(match, idx, refDate) { // internal helper, see below
		if (idx == _null || !match)
			return 0;
		return parseFloat(match[idx]+match[idx+1])*60 + parseFloat(match[idx]+match[idx+2]) + refDate.getTimezoneOffset();
	}

	// formats number with format string (e.g. "#.000", "#,#", "00000", "000.00", "000.000.000,00", "000,000,000.##")
	// choice syntax: <cmp><value>:<format>|<cmp><value>:<format>|... 
	// e.g. 0:no item|1:one item|>=2:# items
	// <value>="null" used to compare with nulls.
	// choice also works with strings or bools, e.g. ERR:error|WAR:warning|FAT:fatal|ok
	function formatValue(fmt, value) {
		var format = replace(fmt, /^\?/);
		if (isDate(value)) {
			var timezone, match;

			if (match = /^\[(([+-])(\d\d)(\d\d))\]\s*(.*)/.exec(format)) {
				timezone = match[1];
				value = dateAdd(value, 'minutes', getTimezone(match, 2, value));
				format = match[5];
			}

			return replace(format, /(\w)(\1*)(?:\[([^\]]+)\])?/g, function(s, placeholderChar, placeholderDigits, params) {
				var val = FORMAT_DATE_MAP[placeholderChar];
				if (val) {
					var d = value['get' + val[0]]();
					var optionArray = (params && params.split(','));

					if (isList(val[1])) 
						d = (optionArray || val[1])[d];
					else
						d = val[1](d, optionArray, timezone);
					if (d != _null && !isString(d))
						d = pad(placeholderDigits.length+1, d);
					return d;
				}
				else
					return s;
			});

		}
		else 
			return find(format.split(/\s*\|\s*/), function(fmtPart) {
				var match, numFmtOrResult;
				if (match = /^([<>]?)(=?)([^:]*?)\s*:\s*(.*)$/.exec(fmtPart)) {
					var cmpVal1 = value, cmpVal2 = +(match[3]);
					if (isNaN(cmpVal2) || !isNumber(cmpVal1)) {
						cmpVal1 = (cmpVal1==_null) ? "null" : toString(cmpVal1); // not ""+value, because undefined is treated as null here
						cmpVal2 = match[3];
					}
					if (match[1]) {
						if ((!match[2] && cmpVal1 == cmpVal2 ) ||
						    (match[1] == '<'  && cmpVal1 > cmpVal2)  ||
						    (match[1] == '>'  && cmpVal1 < cmpVal2))
							return _null;
					}
					else if (cmpVal1 != cmpVal2)
						return _null;
					numFmtOrResult = match[4];
				}
				else
					numFmtOrResult = fmtPart;

				if (isNumber(value))
					return numFmtOrResult.replace(/[0#](.*[0#])?/, function(numFmt) {
						var decimalFmt = /^([^.]+)(\.)([^.]+)$/.exec(numFmt) || /^([^,]+)(,)([^,]+)$/.exec(numFmt);
						var signed = value < 0 ? '-' : '';
						var numData = /(\d+)(\.(\d+))?/.exec((signed?-value:value).toFixed(decimalFmt ? decimalFmt[3].length:0));
						var preDecimalFmt = decimalFmt ? decimalFmt[1] : numFmt;
						var postDecimal = decimalFmt ? processNumCharTemplate(decimalFmt[3], replace(numData[3], /0+$/), true) : '';

						return 	(signed ? '-' : '') + 
								(preDecimalFmt == '#' ? numData[1] : processNumCharTemplate(preDecimalFmt, numData[1])) +
								(postDecimal.length ? decimalFmt[2] : '') +
								postDecimal;
					});
				else
					return numFmtOrResult;
			});
	}
	// returns date; null if optional and not set; undefined if parsing failed
	function parseDate(fmt, date) {
		var indexMap = {}; // contains reGroupPosition -> typeLetter or [typeLetter, value array]
		var reIndex = 1;
		var timezoneOffsetMatch;
		var timezoneIndex;
		var match;

		var format = replace(fmt, /^\?/);
		if (format!=fmt && !trim(date))
			return _null;

		if (match = /^\[([+-])(\d\d)(\d\d)\]\s*(.*)/.exec(format)) {
			timezoneOffsetMatch = match;
			format = match[4];
		}

		var parser = new RegExp(format.replace(/(.)(\1*)(?:\[([^\]]*)\])?/g, function(wholeMatch, placeholderChar, placeholderDigits, param) {
			if (/[dmhkyhs]/i.test(placeholderChar)) {
				indexMap[reIndex++] = placeholderChar;
				var plen = placeholderDigits.length+1;
				return "(\\d"+(plen<2?"+":("{1,"+plen+"}"))+")";
			}
			else if (placeholderChar == 'z') {
				timezoneIndex = reIndex;
				reIndex += 3;
				return "([+-])(\\d\\d)(\\d\\d)";
			}
			else if (/[Nna]/.test(placeholderChar)) {
				indexMap[reIndex++] = [placeholderChar, param && param.split(',')];
				return "([a-zA-Z\\u0080-\\u1fff]+)";
			}
			else if (/w/i.test(placeholderChar))
			    return "[a-zA-Z\\u0080-\\u1fff]+";
			else if (/\s/.test(placeholderChar))
				return "\\s+"; 
			else 
				return escapeRegExp(wholeMatch);
		}));

		if (!(match = parser.exec(date)))
			return undef;

		var ctorArgs = [0, 0, 0, 0, 0, 0,  0];
		for (var i = 1; i < reIndex; i++) {
			var matchVal = match[i];
			var indexEntry = indexMap[i];
			if (isList(indexEntry)) { // for a, n or N
				var placeholderChar = indexEntry[0];
				var mapEntry  = PARSE_DATE_MAP[placeholderChar];
				var ctorIndex = mapEntry[0];
				var valList = indexEntry[1] || mapEntry[1];
				var listValue = find(valList, function(v, index) { if (startsWith(matchVal.toLowerCase(), v.toLowerCase())) return index; });
				if (listValue == _null)
					return undef;
				if (placeholderChar == 'a')
					ctorArgs[ctorIndex] += listValue * 12;
				else
					ctorArgs[ctorIndex] = listValue;
			}
			else if (indexEntry) { // for numeric values (yHmMs)
				var value = parseFloat(matchVal);
				var mapEntry  = PARSE_DATE_MAP[indexEntry];
				if (isList(mapEntry))
					ctorArgs[mapEntry[0]] += value - mapEntry[1];
				else
					ctorArgs[mapEntry] += value;
			}
		}
		var d = new Date(ctorArgs[0], ctorArgs[1], ctorArgs[2], ctorArgs[3], ctorArgs[4], ctorArgs[5], ctorArgs[6]);
		return dateAdd(d, 'minutes', -getTimezone(timezoneOffsetMatch, 1, d) - getTimezone(match, timezoneIndex, d));
	}
	// format ?##00,00##
	// returns number; null if optional and not set; undefined if parsing failed
	function parseNumber(fmt, value) {
		var format = replace(fmt, /^\?/);
		if (format!=fmt && !trim(value))
			return _null;
		var decSep = (/(^|[^0#.,])(,|[0#.]*,[0#]+|[0#]+\.[0#]+\.[0#.,]*)($|[^0#.,])/.test(format)) ? ',' : '.';
		var r = parseFloat(replace(replace(replace(value, decSep == ',' ? /\./g : /,/g), decSep, '.'), /^[^\d-]*(-?\d)/, '$1'));
		return isNaN(r) ? undef : r;
	}
	function now() {
		return new Date();
	}
	function dateClone(date) {
		return new Date(+date);
	}
	function capWord(w) { 
		return w.charAt(0).toUpperCase() + w.substr(1); 
	}
	function dateAddInline(d, cProp, value) {
		d['set'+cProp](d['get'+cProp]() + value);
		return d;
	}
	function dateAdd(date, property, value) {
		if (value == _null)
			return dateAdd(now(), date, property);
		return dateAddInline(dateClone(date), capWord(property), value);
	}
	function dateMidnight(date) {
		var od = date || now();
		return new Date(od.getFullYear(), od.getMonth(), od.getDate());
	}
	function dateDiff(property, date1, date2) {
		var d1t = +date1;
		var d2t = +date2;
		var dt = d2t - d1t;
		if (dt < 0)
			return -dateDiff(property, date2, date1);

		var propValues = {'milliseconds': 1, 'seconds': 1000, 'minutes': 60000, 'hours': 3600000};
		var ft = propValues[property];
		if (ft)
			return dt / ft;

		var cProp = capWord(property);
		var calApproxValues = {'fullYear': 8.64e7*365, 'month': 8.64e7*365/12, 'date': 8.64e7}; // minimum values, a little bit below avg values
		var minimumResult = Math.floor((dt / calApproxValues[property])-2); // -2 to remove the imperfections caused by the values above

		var d = dateAddInline(new Date(d1t), cProp, minimumResult);
		for (var i = minimumResult; i < minimumResult*1.2+4; i++) { // try out 20% more than needed, just to be sure
			if (+dateAddInline(d, cProp, 1) > d2t)
				return i;
		}
		// should never ever be reached
	}

	function ucode(a) {
		return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	}

	function escapeJavaScriptString(s) {
		return replace(s, /[\x00-\x1f'"\u2028\u2029]/g, ucode);
	}

	// reimplemented split for IE8
	function split(str, regexp) {

		return str.split(regexp);
	}

	function template(template, escapeFunction) {
		if (templateCache[template])
			return templateCache[template];
		else {
			var funcBody = 'with(_.isObject(obj)?obj:{}){'+
				map(split(template, /{{|}}}?/g), function(chunk, index) {
					var match, c1 = trim(chunk), c2 = replace(c1, /^{/), escapeSnippet  = (c1==c2) ? 'esc(' : '';
					if (index%2) { // odd means JS code
						if (match = /^each\b(\s+([\w_]+(\s*,\s*[\w_]+)?)\s*:)?(.*)/.exec(c2))
							return 'each('+(trim(match[4])?match[4]:'this')+', function('+match[2]+'){';
						else if (match = /^if\b(.*)/.exec(c2))
							return 'if('+match[1]+'){';
						else if (match = /^else\b\s*(if\b(.*))?/.exec(c2))
							return '}else ' + (match[1]  ? 'if('+match[2] +')' : '')+'{';
						else if (match = /^\/(if)?/.exec(c2))
							return match[1] ? '}\n' : '});\n';
						else if (match = /^(var\s.*)/.exec(c2))
							return match[1]+';';
						else if (match = /^#(.*)/.exec(c2))
							return match[1];
						else if (match = /(.*)::\s*(.*)/.exec(c2))
							return 'print('+escapeSnippet+'_.formatValue("'+escapeJavaScriptString(match[2])+'",'+(trim(match[1])?match[1]:'this')+(escapeSnippet&&')')+'));\n';
						else
							return 'print('+escapeSnippet+(trim(c2)?c2:'this')+(escapeSnippet&&')')+');\n';
					}
					else if (chunk){
						return 'print("'+escapeJavaScriptString(chunk)+'");\n';
					}
				}).join('')+'}';
			var f = (new Function('obj', 'each', 'esc', 'print', '_', funcBody));
			var t = function(obj, thisContext) {
				var result = [];
				f.call(thisContext || obj, obj, function(obj, func) {
					if (isList(obj))
						each(obj, function(value, index) { func.call(value, value, index); });
					else
						eachObj(obj, function(key, value) { func.call(value, key, value); });
				}, escapeFunction || nonOp, function() {call(result['push'], result, arguments);}, _);
				return result.join('');
			};
			if (templates.push(t) > MAX_CACHED_TEMPLATES)
				delete templateCache[templates.shift()];
			return templateCache[template] = t; 
		}
	}

	function escapeHtml(s) {
		return replace(s, /[<>'"&]/g, function(s) {
			return '&#'+s.charCodeAt(0)+';';
		});
	}	

	function formatHtml(tpl, obj) { 
		return template(tpl, escapeHtml)(obj); 
	}

	function listBindArray(func) {
		return function(arg1, arg2) {
			return new M(func(this, arg1, arg2));
		};
	}
	function listBind(func) {
		return function(arg1, arg2, arg3) {
			return func(this, arg1, arg2, arg3);
		};
	}
	function funcArrayBind(func) {
		return function(arg1, arg2, arg3) {
			return new M(func(arg1, arg2, arg3));
		};
	}

	///#/snippet commonFunctions
	///#snippet webFunctions

	// note: only the web version has the f.item check
	function isFunction(f) {
		return typeof f == 'function' && !f['item']; // item check as work-around for webkit bug 14547
	}

	function isList(v) {
		return v && v.length != _null && !isString(v) && !isNode(v) && !isFunction(v) && v !== _window;
	}

	// used by IE impl of on() only
	function push(obj, prop, value) {
		(obj[prop] = (obj[prop] || [])).push(value);
	}
	// used by IE impl of on()/off() only
	function removeFromArray(array, value) {
		for (var i = 0; array && i < array.length; i++) 
			if (array[i] === value) 
				array['splice'](i--, 1);
	}

	function extractNumber(v) {
		return parseFloat(replace(v, /^[^\d-]+/));
	}

	// retrieves the node id of the element, create one if needed.
	function getNodeId(el) {
		return (el[MINIFIED_MAGIC_NODEID] = (el[MINIFIED_MAGIC_NODEID] || ++idSequence));
	}

	// collect variant that filters out duplicate nodes from the given list, returns a new array
	function collectUniqNodes(list, func) {
		var result = [];
		var nodeIds = {};
		var currentNodeId;

		flexiEach(list, function(value) {
			flexiEach(func(value), function(node) {
				if (!nodeIds[currentNodeId = getNodeId(node)]) {
					result.push(node);
					nodeIds[currentNodeId] = true;
				}
			});
		});
		return result;
	}

	// finds out the 'natural' height of the first element, the one if $$slide=1
	function getNaturalHeight(elementList, factor) {
		var q = {'$position': 'absolute', '$visibility': 'hidden', '$display': 'block', '$height': _null};
		var oldStyles = elementList['get'](q);
		var h = elementList['set'](q)['get']('clientHeight');
		elementList['set'](oldStyles);
		return h*factor + 'px';
	}




	// @condblock !ie8compatibility 
	function on(subSelector, eventSpec, handler, args, bubbleSelector) {
		if (isFunction(eventSpec))
			return this['on'](_null, subSelector, eventSpec, handler, args);
		else if (isString(args)) 
			return this['on'](subSelector, eventSpec, handler, _null, args);
		else
			return this['each'](function(baseElement, index) {
				flexiEach(subSelector ? dollarRaw(subSelector, baseElement) : baseElement, function(registeredOn) {
					flexiEach(toString(eventSpec).split(/\s/), function(namePrefixed) {
						var name = replace(namePrefixed, /[?|]/g);
						var prefix = replace(namePrefixed, /[^?|]/g);
						var capture = (name == 'blur' || name == 'focus') && !!bubbleSelector; // bubble selectors for 'blur' and 'focus' registered as capuring!
						var triggerId = idSequence++;

						// returns true if processing should be continued
						function triggerHandler(eventName, event, target) {
							var match = !bubbleSelector;
							var el = bubbleSelector ? target : registeredOn;
							if (bubbleSelector) {
								var selectorFilter = getFilterFunc(bubbleSelector, registeredOn);
								while (el && el != registeredOn && !(match = selectorFilter(el)))
									el = el['parentNode'];
							}
							return (!match) || (name != eventName) || ((handler.apply($(el), args || [event, index]) && prefix=='?') || prefix == '|');
						};

						function eventHandler(event) {
							if (!triggerHandler(name, event, event['target'])) {
								event['preventDefault']();
								event['stopPropagation']();
							}
						};

						registeredOn.addEventListener(name, eventHandler, capture);

						if (!registeredOn['M']) 
							registeredOn['M'] = {};
						registeredOn['M'][triggerId] = triggerHandler;                  // to be called by trigger()

						handler['M'] = collector(flexiEach, [handler['M'], function () { // this function will be called by off()
							registeredOn.removeEventListener(name, eventHandler, capture);
							delete registeredOn['M'][triggerId];
						}], nonOp);

					});
				});
			});
	}
	// @condend !ie8compatibility 


	// @condblock !ie8compatibility 
	function off(handler) {
		callList(handler['M']);
		handler['M'] = _null;
	}
	// @condend !ie8compatibility 

	// for remove & window.unload, IE only
	function detachHandlerList(dummy, handlerList) {
		flexiEach(handlerList, function(h) {
			h.element.detachEvent('on'+h.eventType, h.handlerFunc);
		});
	}

	function ready(handler) {
		if (DOMREADY_HANDLER)
			DOMREADY_HANDLER.push(handler);
		else
			setTimeout(handler, 0);
	}

	function $$(selector, context, childrenOnly) {
		return dollarRaw(selector, context, childrenOnly)[0];
	}

	function EE(elementName, attributes, children) {
		var e = $(document.createElement(elementName));
		// @condblock UTIL
		// this attributes != null check is only required with Util's isObject() implementation. Web's isObject() is simpler.
		return (isList(attributes) || (attributes != _null && !isObject(attributes)) ) ? e['add'](attributes) : e['set'](attributes)['add'](children);
		// @condend UTIL
		// @cond !UTIL return (isList(attributes) || (!isObject(attributes)) ) ? e['add'](attributes) : e['set'](attributes)['add'](children);
	}

	function clone(listOrNode) {
		return collector(flexiEach, listOrNode, function(e) {
			var c;
			if (isList(e))
				return clone(e);
			else if (isNode(e)) {
				c = e['cloneNode'](true); 
				c['removeAttribute'] && c['removeAttribute']('id');
				return c;
			}
		    else
		    	return e;
		});
   }

	/*$
	 * @stop
	 */

	function $(selector, context, childOnly) { 
		return new M(dollarRaw(selector, context));
	}

	// implementation of $ that does not produce a Minified list, but just an array










	// @condblock !ie7compatibility
	function dollarRaw(selector, context, childOnly) { 
		function flatten(a) { // flatten list, keep non-lists, remove nulls
		      return isList(a) ? collector(flexiEach, a, flatten) : a;
		 }
		 function filterElements(list) { // converts into array, makes sure context is respected
		      return filter(collector(flexiEach, list, flatten), function(node) {
		           var a = node;
		           while (a = a['parentNode'])
		                if (a == context[0] || childOnly)
		                     return a == context[0];
		           // fall through to return undef
		      });
		 }

		 if (context) {
		      if ((context = dollarRaw(context)).length != 1)
		           return collectUniqNodes(context, function(ci) { return dollarRaw(selector, ci, childOnly);});
		      else if (isString(selector)) {
		      		if (isNode(context[0]) != 1)
						return [];
					else 
		        		return childOnly ? filterElements(context[0].querySelectorAll(selector)) : context[0].querySelectorAll(selector);
		      }
		      else
		           return filterElements(selector);

		 }
		 else if (isString(selector))
		      return document.querySelectorAll(selector);
		 else
		      return collector(flexiEach, selector, flatten);
	};
	// @condend !ie7compatibility

	// If context is set, live updates will be possible. 
	// Please note that the context is not evaluated for the '*' and 'tagname.classname' patterns, because context is used only
	// by on(), and in on() only nodes in the right context will be checked
	function getFilterFunc(selector, context) {
		function wordRegExpTester(name, prop) {
			var re = RegExp('(^|\\s+)' + name + '(?=$|\\s)', 'i');
			return function(obj) {return  name ? re.test(obj[prop]) : true;};
		}

		var nodeSet = {};
		var dotPos = nodeSet;
		if (isFunction(selector))
			return selector;
		else if (isNumber(selector))
			return function(v, index) { return index == selector; };
		else if (!selector || selector == '*' ||
				 (isString(selector) && (dotPos = /^([\w-]*)\.?([\w-]*)$/.exec(selector)))) {
			var nodeNameFilter = wordRegExpTester(dotPos[1], 'tagName');
			var classNameFilter = wordRegExpTester(dotPos[2], 'className');
			return function(v) {
				return isNode(v) == 1 && nodeNameFilter(v) && classNameFilter(v);
			};
		}
		else if (context) 
			return function(v) { 
				return $(selector, context)['find'](v)!=_null; // live search instead of node set, for on()
			};
		else {
			$(selector)['each'](function(node) {
				nodeSet[getNodeId(node)] = true;
			});
			return function(v) { 
				return nodeSet[getNodeId(v)]; 
			};
		}	
	}

	function getInverseFilterFunc(selector) {
		var f = getFilterFunc(selector);
		return function(v) {return f(v) ? _null : true;};
	}
	///#/snippet webFunctions

	///#snippet extrasFunctions
	function flexiEach(list, cb) {
		if (isList(list))
			each(list, cb);
		else if (list != _null)
			cb(list, 0);
		return list;
	}

	function Promise() {
        this['state'] = null; 
        this['values'] = []; 
        this['parent'] = null; 
	}

	/*$
	 * @id promise
	 * @name _.promise()
	 * @syntax _.promise()
	 * @syntax _.promise(otherPromises...)
	 * @module WEB+UTIL
	 * 
	 * Creates a new ##promiseClass#Promise##, optionally assimilating other promises. If no other promise is given, 
	 * a fresh new promise is returned. 
	 *
	 * The returned promise provides the methods ##fulfill() and ##reject() that can be called directly to change the promise's state,
	 * as well as the more powerful ##fire().
	 * 
	 * If one promise is given as parameter, the new promise assimilates the given promise as-is, and just forwards 
	 * fulfillment and rejection with the original values.
	 *
	 * If more than one promise are given, it will assimilate all of them with slightly different rules:
	 * <ul><li>the new promise is fulfilled if all assimilated promises have been fulfilled. The fulfillment values
	 *         of all assimilated promises are given to the handler as arguments. Note that the fulfillment values themselves are always 
	 *         arrays, as a promise can have several fulfillment values in Minified's implementation.</li>
	 * <li>when one of the promises is rejected, the new promise is rejected immediately. The rejection handler gets the 
	 *     promises rejection value (first argument if it got several) as first argument, an array of the result values 
	 *     of all promises as a second (that means one array of arguments for each promise), and the index of the failed 
	 *     promise as third.
	 * </li></ul>
	 * 
	 * @example A simple promise that is fulfilled after 1 second, using Minified's invocation syntax:
	 * <pre>var p = _.promise();
	 * setTimeout(function() { 
	 *     p.fire(true); 
	 * }, 1000);
	 * </pre>
	 *
	 * @example Request three files in parallel. When all three have been downloaded, concatenate them into a single string.
     * <pre>
     * var files = _('fileA.txt', 'fileA.txt', 'fileC.txt');
     * var content;
     * _.promise(files.map(function(file) {
     *      return $.request('get', '/txts/' + file);
     * })).then(function(fileRslt1, fileRslt2, fileRslt3) {
     *      content = _(fileRslt1, fileRslt2, fileRslt3).map( function(result) { return result[0]; }).join('');
     * }).error(function(status, response, xhr, url) {
     *    alert('failed to load file '+url);
     * });
     * </pre>
	 * 
	 * @param otherPromises one or more promises to assimilate (varargs). You can also pass lists of promises.
	 * @return the new promise.
	 */
	function promise() {
		var deferred = [];   // this function calls the functions supplied by then()

		var assimilatedPromises = arguments;
		var assimilatedNum = assimilatedPromises.length;
		var numCompleted = 0; // number of completed, assimilated promises
		var rejectionHandlerNum = 0;

		var obj = new Promise();

		obj['errHandled'] = function() {
			rejectionHandlerNum++;
			if (obj['parent'])
				obj['parent']['errHandled']();
		};

		/*$
		 * @id fire
		 * @name promise.fire()
		 * @syntax _.fire(newState)
		 * @syntax _.fire(newState, values)
		 * @module WEB+UTIL
		 * 
		 * Changes the state of the promise into either fulfilled or rejected. This will also notify all ##then() handlers. If the promise
		 * already has a state, the call will be ignored.
		 *
		 * <var>fire()</var> can be invoked as a function without context ('this'). Every promise has its own instance.
		 * 
		 * @example A simple promise that is fulfilled after 1 second, using Minified's invocation syntax:
		 * <pre>var p = _.promise();
		 * setTimeout(function() { 
		 *     p.fire(true, []); 
		 * }, 1000);
		 * </pre>
		 *
		 * @example Call <var>fire()</var> without a context:
		 * <pre>var p = _.promise(function(resolve, reject) {
         *     setTimeout(resolve.fire, 1000);
		 * });
		 * </pre>
		 *
		 * @param newState <var>true</var> to set the Promise to fulfilled, <var>false</var> to set the state as rejected. If you pass <var>null</var> or
		 * <var>undefined</var>, the promise's state does not change.
		 * @param values optional an array of values to pass to ##then() handlers as arguments. You can also pass a non-list argument, which will then 
		 *               be passed as only argument.
		 * @return the promise 
		 */
		var fire = obj['fire'] = function(newState, newValues) {
			if (obj['state'] == null && newState != null) {
				obj['state'] = !!newState;
				obj['values'] = isList(newValues) ? newValues : [newValues];
				setTimeout(function() {
					each(deferred, function(f) {f();});
				}, 0);
			}
			return obj;
		};

		// use promise varargs
		each(assimilatedPromises, function assimilate(promise, index) {
			try {
		        if (promise['then'])
                    promise['then'](function(v) {
                        var then;
                        if ((isObject(v) || isFunction(v)) && isFunction(then = v['then']))
                            assimilate(v, index);
                        else {
                            obj['values'][index] = array(arguments);
                            if (++numCompleted == assimilatedNum)
                                fire(true, assimilatedNum < 2 ? obj['values'][index] : obj['values']);
                        }
                    }, 
                    function(e) {
                        obj['values'][index] = array(arguments);
                        fire(false, assimilatedNum < 2 ? obj['values'][index] : [obj['values'][index][0], obj['values'], index]);
                    });
				else
					promise(function() {fire(true, array(arguments));}, function() {fire(false, array(arguments)); });
			}
			catch (e) {
				fire(false, [e, obj['values'], index]);
			}
		});

		/*$
		 * @id stop
		 * @name promise.stop()
		 * @syntax promise.stop()
		 * @module WEB+UTIL
		 * Stops an ongoing operation, if supported. Currently the only promises supporting this are those returned by ##request(), ##animate(), ##wait() and
		 * ##asyncEach(). 
		 * stop() invocation will be propagated over promises returned by ##then() and promises assimilated by ##promise(). You only need to invoke stop
		 * with the last promise, and all dependent promises will automatically stop as well. 
		 * 
		 *  <var>stop()</var> can be invoked as a function without context ('this'). Every promise has its own instance.
		 *
		 * @return In some cases, the <var>stop()</var> can return a value. This is currently only done by ##animate() and ##wait(), which will return the actual duration.
		 *         ##asyncEach()'s promise will also return any value it got from the promise that it stopped.
		 *
		 * @example Animation chain that can be stopped.
		 * <pre>
		 * var div = $('#myMovingDiv').set({$left: '0px', $top: '0px'});
		 * var prom = div.animate({$left: '200px', $top: '0px'}, 600, 0)
		 *    .then(function() {
		 *           return _.promise(div.animate({$left: '200px', $top: '200px'}, 800, 0), 
		 *                            div.animate({$backgroundColor: '#f00'}, 200));
		 *    }).then(function() {
		 *           return div.animate({$left: '100px', $top: '100px'}, 400);
		 *    });
		 *    
		 * $('#stopButton').on('click', prom.stop);
		 * </pre>
		 */   
		obj['stop'] = function() {
			each(assimilatedPromises, function(promise) {
				if (promise['stop'])
					promise['stop']();
			});

			return obj['stop0'] && call(obj['stop0']);
		};

		/*$
		 * @id then
		 * @name promise.then()
		 * @syntax promise.then()
		 * @syntax promise.then(onSuccess)
		 * @syntax promise.then(onSuccess, onError)
		 * 
		 * @module WEB
		 * Registers two callbacks that will be invoked when the ##promise#Promise##'s asynchronous operation finished 
		 * successfully (<var>onSuccess</var>) or an error occurred (<var>onError</var>). The callbacks will be called after  
		 * <var>then()</var> returned, from the browser's event loop.
		 * You can chain <var>then()</var> invocations, as <var>then()</var> returns another Promise object that you can attach to. 
         *
		 * The full distribution of Minified implements the Promises/A+ specification, allowing interoperability with other Promises frameworks. 
		 *
		 * <strong>Note:</strong> If you use the Web module, you will get a simplified Promises implementation that cuts some corners. The most notable
		 * difference is that when a <code>then()</code> handler throws an exception, this will not be caught and the promise returned by 
		 * <code>then</code> will not be automatically rejected.
		 *
		 * @example Simple handler for an HTTP request. Handles only success and ignores errors.
		 * <pre>
		 * $.request('get', '/weather.html')
		 *     .then(function(txt) {
		 *        alert('Got response!');
		 *     });
		 * </pre>
		 *
		 * @example Including an error handler.
		 * <pre>
		 * $.request('get', '/weather.html')
		 *     .then(function(txt) {
		 *        alert('Got response!');
		 *     }, function(err) {
		 *        alert('Error!');
		 *     }));
		 * </pre>
		 *
		 * @example Chained handler.
		 * <pre>
		 * $.request('get', '/weather.do')
		 *     .then(function(txt) {
		 *        showWeather(txt);
		 *     }
		 *     .then(function() {
		 *        return $.request('get', '/traffic.do');
		 *     }
		 *     .then(function(txt) {
		 *        showTraffic(txt);
		 *     }
		 *     .then(function() {
		 *        alert('All result displayed');
		 *     }, function() {
		 *        alert('An error occurred');
		 *     });
		 * </pre>
		 *
		 * @param onSuccess optional a callback function to be called when the operation has been completed successfully. The exact arguments it receives depend on the operation.  
		 *                           If the function returns a ##promise#Promise##, that Promise will be evaluated to determine the state of the promise returned by <var>then()</var>. If it returns any other value, the 
		 *                           returned Promise will also succeed. If the function throws an error, the returned Promise will be in error state.
		 *                           Pass <var>null</var> or <var>undefined</var> if you do not need the success handler. 
		 * @param onError optional a callback function to be called when the operation failed. The exact arguments it receives depend on the operation. If the function returns a ##promise#Promise##, that promise will
		 *                           be evaluated to determine the state of the Promise returned by <var>then()</var>. If it returns anything else, the returned Promise will 
		 *                           have success status. If the function throws an error, the returned Promise will be in the error state.
		 *                           You can pass <var>null</var> or <var>undefined</var> if you do not need the error handler. 
		 * @return a new ##promise#Promise## object. If you specified a callback for success or error, the new Promises's state will be determined by that callback if it is called.
		 *         If no callback has been provided and the original Promise changes to that state, the new Promise will change to that state as well.
		 */   
		var then = obj['then'] = function (onFulfilled, onRejected) {
			var promise2 = promise();
			var callCallbacks = function() {
				try {
					var f = (obj['state'] ? onFulfilled : onRejected);
					if (isFunction(f)) {
                        (function resolve(x) {
                            try {
                                var then, cbCalled = 0;
                                if ((isObject(x) || isFunction(x)) && isFunction(then = x['then'])) {
										if (x === promise2)
											throw new TypeError();
										then.call(x, function(x) { if (!cbCalled++) resolve(x); }, function(value) { if (!cbCalled++) promise2['fire'](false, [value]);});
										promise2['stop0'] = x['stop'];
                                }
                                else
                                    promise2['fire'](true, [x]);
                            }
                            catch(e) {
                                if (!(cbCalled++)) {
                                    promise2['fire'](false, [e]);
                                    if (!rejectionHandlerNum)
										throw e;
                                }
                            }
                        })(call(f, undef, obj['values']));
                    }
                    else
                        promise2['fire'](obj['state'], obj['values']);
				}
				catch (e) {
					promise2['fire'](false, [e]);
					if (!rejectionHandlerNum)
						throw e;
				} 
			};
			if (isFunction(onRejected))
				obj['errHandled']();
			promise2['stop0'] = obj['stop'];
			promise2['parent'] = obj;
			if (obj['state'] != null)
				setTimeout(callCallbacks, 0);
			else
				deferred.push(callCallbacks);
			return promise2;
		};

		/*$
		 * @id always
		 * @group REQUEST
		 * @name promise.always()
		 * @syntax promise.always(callback)
		 * @configurable default
		 * @module WEB+UTIL
		 * Registers a callback that will always be called when the ##promise#Promise##'s operation ended, no matter whether the operation succeeded or not.
		 * This is a convenience function that will call ##then() with the same function for both arguments. It shares all of its semantics.
		 *
		 * @example Simple handler for a HTTP request.
		 * <pre>
		 * $.request('get', '/weather.html')
		 *     .always(function() {
		 *        alert('Got response or error!');
		 *     });
		 * </pre>
		 *
		 * @param callback a function to be called when the operation has been finished, no matter what its result was. The exact arguments depend on the operation and may
		 *                 vary depending on whether it succeeded or not. If the function returns a ##promise#Promise##, that Promise will
		 *                 be evaluated to determine the state of the returned Promise. If provided and it returns regularly, the returned promise will 
		 *                 have success status. If it throws an error, the returned Promise will be in the error state.
		 * @return a new ##promise#Promise## object. Its state is determined by the callback.
		 */
        obj['always'] = function(func) { return then(func, func); };

		/*$
		 * @id error
		 * @group REQUEST
		 * @name promise.error()
		 * @syntax promise.error(callback)
		 * @configurable default
		 * @module WEB, UTIL
		 * Registers a callback that will be called when the operation failed.
		 * This is a convenience function that will invoke ##then() with only the second argument set.  It shares all of its semantics.
		 *
		 * @example Simple handler for a HTTP request.
		 * <pre>
		 * $.request('get', '/weather.html')
		 *     .error(function() {
		 *        alert('Got error!');
		 *     });
		 * </pre>
		 *
		 * @param callback a function to be called when the operation has failed. The exact arguments depend on the operation. If the function returns a ##promise#Promise##, that Promise will
		 *                           be evaluated to determine the state of the returned Promise. If it returns regularly, the returned Promise will 
		 *                           have success status. If it throws an error, the returned Promise will be in error state.
		 * @return a new ##promise#Promise## object. Its state is determined by the callback.
		 */  
        obj['error'] = function(func) { return then(0, func); };

        return obj;
    }

	///#/snippet extrasFunctions
	///#snippet extrasDocs
    /*$
	 * @id length
	 * @group SELECTORS
	 * @requires dollar
	 * @name list.length
	 * @syntax length
     * @module WEB, UTIL
	 * 
	 * Contains the number of elements in the ##list#Minified list##.
	 * 
	 * @example With Web module:
	 * <pre>
	 * var list = $('input');
	 * var myValues = {};
	 * for (var i = 0; i &lt; list.length; i++)
	 *    myValues[list[i].name] = list[i].value;
	 * </pre>
	 * 
	 * @example With Util module:
	 * <pre>
	 * var list = _(1, 2, 3);
	 * var sum = 0;
	 * for (var i = 0; i &lt; list.length; i++)
	 *    sum += list[i];
	 * </pre>
	 */
	/*$
	 * @stop 
	 */
	///#/snippet extrasDocs

	///#snippet utilM

	/*
	 * syntax: M(list, assimilateSublists)
	 *         M(null, singleElement) 
	 * 
	 * 
	 */
	/** @constructor */
	function M(list, assimilateSublists) {
		var self = this, idx = 0;
		if (list)
			for (var i = 0, len = list.length; i < len; i++) {
				var item = list[i];
				if (assimilateSublists && isList(item))
					for (var j = 0, len2 = item.length; j < len2; j++)
						self[idx++] = item[j];
				else 
					self[idx++] = item;
			}
		else
			self[idx++] = assimilateSublists;

		self['length'] = idx;
		self['_'] = true;
	}

	function _() {
		return new M(arguments, true);
	}

	///#/snippet utilM

	//// LIST FUNCTIONS ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	copyObj({
		///#snippet utilListFuncs
	/*$
	 * @stop 
	 */
	dummySort:0
	,
	///#/snippet utilListFuncs
	///#snippet webListFuncs

  	/*$
 	 * @id get
 	 * @group SELECTORS
 	 * @requires dollar
 	 * @configurable default
 	 * @name .get()
 	 * @syntax list.get(name)
 	 * @syntax list.get(name, toNumber)
 	 * @syntax list.get(list)
 	 * @syntax list.get(list, toNumber)
 	 * @syntax list.get(map)
 	 * @syntax list.get(map, toNumber)
 	 * @module WEB
 	 * Retrieves properties, attributes and styles from the list's first element. The syntax to request those values is mostly identical with ##set(). You can either
 	 * get a single value if you specify only one name, or get an object map when you specify several names using an array or an object map.
 	 * 
	 * The <var>name</var> parameter defines what kind of data you are reading. The following name schemes are supported:
	 * <table>
	 * <tr><th>Name Schema</th><th>Example</th><th>Sets what?</th><th>Description</th></tr>
	 * <tr><td>name</td><td>innerHTML</td><td>Property</td><td>A name without prefix of '$' or '@' gets a property of the object.</td></tr>
	 * <tr><td>@name</td><td>@href</td><td>Attribute</td><td>Gets the HTML attribute using getAttribute().</td></tr>
	 * <tr><td>%name</td><td>%phone</td><td>Data-Attribute</td><td>Gets a data attribute using getAttribute(). Data attributes are
	 *         attributes whose names start with 'data-'. '%myattr' and '@data-myattr' are equivalent.</td></tr>
	 * <tr><td>$name</td><td>$fontSize</td><td>CSS Property</td><td>Gets a style using the element's <var>style</var> object. 
	 *             The syntax for the CSS styles is camel-case (e.g. "$backgroundColor", not "$background-color"). Shorthand properties like "border" or "margin" are 
	 *             not supported. You must use the full name, e.g. "$marginTop". Minified will try to determine the effective style
 	 *             and thus will return the value set in style sheets if not overwritten using a regular style.</td></tr>
	 * <tr><td>$</td><td>$</td><td>CSS Classes</td><td>A simple <var>$</var> returns the CSS classes of the element and is identical with "className".</td></tr>
	 * <tr><td>$$</td><td>$$</td><td>Style</td><td>Reads the element's style attribute in a browser-independent way. On legacy IEs it uses
	 *             <var>style.cssText</var>, and on everything else just the "style" attribute.</td></tr>
	 * <tr><td>$$show</td><td>$$show</td><td>Show/Hide</td><td>Returns 1 if the element is visible and 0 if it is not visible. An element counts as
	 * visible if '$visibility' is not 'hidden' and '$display' is not 'none'. Other properties will be ignored, even if they can also be used to hide the element.</td></tr>
	 * <tr><td>$$fade</td><td>$$fade</td><td>Fade Effect</td><td>The name '$$fade' returns the opacity of the element as a value between 0 and 1.
	 * 			   '$$fade' will also automatically evaluate the element's 'visibility' and 'display' styles to find out whether the element is actually visible.</td></tr>
	 * <tr><td>$$slide</td><td>$$slide</td><td>Slide Effect</td><td>'$$slide' returns the height of the element in pixels with a 'px' suffix and is equivalent to '$height'.
	 * Please note that you can pass that 'px' value to '$$slide' in ##set(), which will then set the according '$height'.</td></tr>
	 * <tr><td>$$scrollX, $$scrollY</td><td>$$scrollY</td><td>Scroll Coordinates</td><td>The names '$$scrollX' and
	 *             '$$scrollY' can be used on <code>$(window)</code> to retrieve the scroll coordinates of the document.
	 *             The coordinates are specified in pixels without a 'px' unit postfix.</td></tr>
	 * </table>
 	 * 
 	 * @example Retrieves the id, title attribute and the background color of the element '#myElement':
 	 * <pre>
 	 * var id = $('#myElement).get('id'); 
 	 * var title = $('#myElement).get('@title'); 
 	 * var bgColor = $('#myElement).get('$backgroundColor'); 
 	 * </pre>
 	 *
 	 * @example Retrieves the id, title attribute and the background color of the element '#myElement' as a map:
 	 * <pre>
 	 * var m = $('#myElement).get(['id', '@title', '$backgroundColor']); 
 	 * var id = m.id;
 	 * var title = m['@title'];
 	 * var bgColor = m.$backgroundColor;
 	 * </pre>
 	 *
 	 * @example Uses ##get() and ##set() to reposition an element:
 	 * <pre>
 	 * var coords = $('#myElement').get({$top: 0, $left: 0}, true); 
 	 * coords.$top = coords.$top + 10 + 'px';
 	 * coords.$left = coords.$left + 20 + 'px';
 	 * $('#myElement').set(coords);
 	 * </pre>
 	 * Please note that the values of $top and $left in the <var>get()</var> invocation do not matter and will be ignored!
 	 *
	 * @param name the name of a single property or attribute to modify. Unprefixed names set properties, a '$' prefix sets CSS styles and
	 *        '@' sets attributes. Please see the table above for special properties and other options.
 	 * @param list in order to retrieve more than one value, you can specify several names in an array or list. <var>get()</var> will then return an object map
 	 *        containing the values.
 	 * @param map if you specify an object that is neither list nor string, <var>get()</var> will use it as a map of property names. Each property name will be requested. 
 	 * The values of the properties in the map will be ignored. <var>get()</var> will then return a new object map containing of results.
 	 * @param toNumber if 'true', <var>get()</var> converts all returned values into numbers. If they are strings, 
 	 *                 <var>get()</var> removes any non-numeric characters before the conversion. This is useful when you request 
 	 *                 a CSS property such as '$marginTop'  that returns a value with a unit suffix, like "21px". <var>get()</var> will convert it 
 	 *                 into a number and return 21. If the returned value is not parsable as a number, <var>NaN</var> will be returned.
 	 * @return if <var>get()</var> was called with a single name, it returns the corresponding value. 
 	 *         If a list or map was given, <var>get()</var> returns a new object map with the names as keys and the values as values.
 	 *         It returns <var>undefined</var> if the list is empty.
	 *
 	 * @see ##set() sets values using the same property syntax.
 	 */
	'get': function(spec, toNumber) {
		var self = this;
		var element = self[0];

		if (element) {
			if (isString(spec)) {
				var match = /^(\W*)(.*)/.exec(replace(spec, /^%/,'@data-'));
				var prefix = match[1];
				var s;

				if (getter[prefix])
					s = getter[prefix](this, match[2]);
				else if (spec == '$') 
					s = self['get']('className');
				else if (spec == '$$') {
						s = self['get']('@style');
				}
				else if (spec == '$$slide')
					s = self['get']('$height');
				else if (spec == '$$fade' || spec == '$$show') {
					if  (self['get']('$visibility') == 'hidden' || self['get']('$display') == 'none')
						s = 0;
					else if (spec == '$$fade') {
						s = 
							isNaN(self['get']('$opacity', true)) ? 1 : self['get']('$opacity', true); 
					}
					else // $$show
						s = 1;
				}
				else if (prefix == '$') {
						s = _window['getComputedStyle'](element, _null)['getPropertyValue'](replace(match[2], /[A-Z]/g, function (match2) {  return '-' + match2.toLowerCase(); }));
				}
				else if (prefix == '@')
					s = element.getAttribute(match[2]);
				else
					s = element[match[2]];
				return toNumber ? extractNumber(s) : s;
			}
			else {
				var r = {};
				(isList(spec) ? flexiEach : eachObj)(spec, function(name) {
					r[name] = self['get'](name, toNumber);
				});
				return r;
			}
		}
	},

	/*$
	 * @id set
	 * @group SELECTORS
	 * @requires dollar get
	 * @configurable default
	 * @name .set()
	 * @syntax list.set(name, value)
	 * @syntax list.set(properties)
	 * @syntax list.set(cssClasses)
 	 * @module WEB
	 * 
	 * Modifies the list's elements by setting their properties, attributes, CSS styles and/or CSS classes. You can either supply a 
	 * single name and value to set only one property, or you can provide an object that contains name/value pairs to describe more than one property.
	 * More complex operations can be accomplished by supplying functions as values. They will then be called for each element that will
	 * be set.
	 *
	 * The <var>name</var> parameter defines what kind of data you are setting. The following name schemes are supported:
	 * 
	 * <table>
	 * <tr><th>Name Schema</th><th>Example</th><th>Sets what?</th><th>Description</th></tr>
	 * <tr><td>name</td><td>innerHTML</td><td>Property</td><td>A name without prefix of '$' or '@' sets a property of the object.</td></tr>
	 * <tr><td>@name</td><td>@href</td><td>Attribute</td><td>Sets the HTML attribute using setAttribute(). In order to stay compatible with Internet Explorer 7 and earlier, 
	 *             you should not set the attributes '@class' and '@style'. Instead use '$' and '$$' as shown below.</td></tr>
	 * <tr><td>%name</td><td>%phone</td><td>Data-Attribute</td><td>Sets a data attribute using setAttribute(). Data attributes are
	 *         attributes whose names start with 'data-'. '%myattr' and '@data-myattr' are equivalent.</td></tr>
	 * <tr><td>$name</td><td>$fontSize</td><td>CSS Property</td><td>Sets a style using the element's <var>style</var> object.
	 *         The syntax for the CSS styles is camel-case (e.g. "$backgroundColor", not "$background-color"). </td></tr>
	 * <tr><td>$</td><td>$</td><td>CSS Classes</td><td>A simple <var>$</var> modifies the element's CSS classes using the object's <var>className</var> property. The value is a 
	 *             space-separated list of class names. If prefixed with '-' the class is removed, a '+' prefix adds the class and a class name without prefix toggles the class.
	 *             The name '$' can also be omitted if <var>set</var> is called with class names as only argument.</td></tr>
	 * <tr><td>$$</td><td>$$</td><td>Style</td><td>Sets the element's style attribute in a browser-independent way.</td></tr>
	 * <tr><td>$$show</td><td>$$show</td><td>Show/Hide</td><td>If <var>true</var> or a number not 0, it will make sure the element is visible by
	 *         making sure '$display' is not 'none' and by setting '$visibility' to 'visible'. Please see ##show() for details. If the value is <var>false</var> or 0, it
	 *         will be hidden by setting '$display' to 'none'.</td></tr>
	 * <tr><td>$$fade</td><td>$$fade</td><td>Fade Effect</td><td>The name '$$fade' sets the opacity of the element in a browser-independent way. The value must be a number
	 *              between 0 and 1. '$$fade' will also automatically control the element's 'visibility' style. If the value is 0,
	 *             the element's visibility will automatically be set to 'hidden'. If the value is larger, the visibility will be set to 
	 *             'visible'. '$$fade' only works with block elements.</td></tr>
	 * <tr><td>$$slide</td><td>$$slide</td><td>Slide Effect</td><td>The name '$$slide' allows a vertical slide-out or slide-in effect. The value must be a number
	 *              between 0 and 1 and will be used to set the element's '$height'. '$$slide' will also automatically control the element's 'visibility' 
	 *              style. If the value is 0, the element's visibility will automatically be set to 'hidden'. If the value is larger, 
	 *              the visibility will be set to 'visible'. '$$slide' only works with block elements and will not set the
	 *              element's margin or padding. If you need a margin or padding, you should wrap the elements in a simple &lt;div>.</td></tr>
	 * <tr><td>$$scrollX, $$scrollY</td><td>$$scrollY</td><td>Scroll Coordinates</td><td>The names '$$scrollX' and
	 *             '$$scrollY' can be used on <code>$(window)</code> to set the scroll coordinates of the document.
	 *             The coordinates are specified in pixels, but must not use a 'px' unit postfix.</td></tr>
	 * </table>
	 *
	 * @example Unchecking checkboxes:
	 * <pre>
	 * $('input.checkbox').set('checked', false);
	 * </pre>
	 * 
	 * @example Changing the <var>innerHTML</var> property of an element:
	 * <pre>
	 * $('#toc').set('innerHTML', 'Content');
	 * </pre>
	 * 
	 * @example Changing attributes:
	 * <pre>
	 * $('a.someLinks').set('@href', 'http://www.example.com/');
	 * </pre>
	 * 
	 * @example Removing attributes:
	 * <pre>
	 * $('a.someLinks').set('@title', null);
	 * </pre>
	 * 
	 * @example Changing styles:
	 * <pre>
	 * $('.bigText').set('$fontSize', 'x-large');
	 * </pre>
	 * 
	 * @example Adding and removing CSS classes:
	 * <pre>
	 * $('.myElem').set('$', '+myClass -otherClass');
	 * </pre>
	 *  
	 * @example Toggling a CSS class:
	 * <pre>
	 * $('.myElem').set('$', 'on');
	 * </pre>
	 * 
	 * @example Shortcut for CSS manipulation:
	 * <pre>
	 * $('.myElem').set('+myClass -otherClass on');
	 * </pre>
	 * 	 
	 * @example Making an element transparent:
	 * <pre>
	 * $('.seeThrough').set('$$fade', 0.5);
	 * </pre>
	 * 	  
	 * @example Making an element visible. Note that $$fade will set the element's display style to 'block' and visibility style to 'visible'.
	 * <pre>
	 * $('.myElem').set('$$fade', 1);
	 * </pre>
	 * 
	 * @example Using a map to change several properties:
	 * <pre>
	 * $('input.checkbox').set({checked: false,
	 *                          '@title': 'Check this'});
	 * </pre>
	 * 
	 * @example Changing CSS with a map:
	 * <pre>
	 * $('.importantText').set({$fontSize: 'x-large',
	 *                          $color: 'black',
	 *                          $backgroundColor: 'red',
	 *                          $: '+selected -default'});
	 * </pre>
	 * 
	 * @example You can specify a function as value to modify a value instead of just setting it:
	 * <pre>
	 * $('h2').set('innerHTML', function(oldValue, index) { 
	 *     return 'Chapter ' + index + ': ' + oldValue.toUpperCase(); 
	 * });
	 * </pre>
	 * 
	 * @param name the name of a single property or attribute to modify. Unprefixed names set properties, a '$' prefix sets CSS styles and
	 *        '@' sets attributes. Please see the table above for special properties and other options.
	 * @param value the value to set. If value is <var>null</var> and name specified an attribute, the attribute will be removed.
	 * If dollar ('$') has been passed as name, the value can contain space-separated CSS class names. If prefixed with a '+' the class will be added,
	 * with a '-' prefix the class will be removed. Without prefix, the class will be toggled.
	 * If <var>value</var> is a function, the <code>function(oldValue, index, obj)</code> will be invoked for each list element 
	 * to evaluate the new value: 
	 * <dl><dt>oldValue</dt><dd>The old value of the property to be changed, as returned by ##get().
	 * For the CSS style names, this is the computed style of the property </dd>
	 * <dt>index</dt><dd>The list index of the object owning the property</dd>
	 * <dt>obj</dt><dd>The list element owning the property.</dd>
	 * <dt class="returnValue">(callback return value)</dt><dd>The value to be set.</dd></dl>
	 * Functions are not supported by '$'.
	 * @param properties a Object as map containing names as keys and the values to set as map values. See above for the name and value syntax.
	 * @param cssClasses if <var>set()</var> is invoked with a string as single argument, the name "$" (CSS classes) is assumed and the argument is the
	 *                   value. See above for CSS syntax.
	 *                   Instead of a string, you can also specify a <code>function(oldValue, index, obj)</code> to modify the existing classes. 
	 * @return the list
	 * 
	 * @see ##get() retrieves values using the same property syntax.
	 * @see ##animate() animates values using the same property syntax.
	 * @see ##toggle() can toggle between two sets of values.
	 * @see ##dial() allows smooth transitions between two sets of values.
	 */
	 'set': function (name, value) {
		 var self = this;
		 if (value !== undef) {
			 var match = /^(\W*)(.*)/.exec(replace(replace(name, /^\$float$/, 'cssFloat'), /^%/,'@data-'));
			 var prefix = match[1];

			 if (setter[prefix])
				 setter[prefix](this, match[2], value);
			 else if (name == '$$fade') {
				 this['set']({'$visibility': value ? 'visible' : 'hidden', '$opacity': value});
			 }
			 else if (name == '$$slide') {
				 self['set']({'$visibility': value ? 'visible' : 'hidden', '$overflow': 'hidden', 
						 	  '$height': /px/.test(value) ? value : function(oldValue, idx, element) { return getNaturalHeight($(element), value);}
				              });
			 }
			 else if (name == '$$show') {
				 if (value) 
					 self['set']({'$visibility': value ? 'visible' : 'hidden', '$display': ''}) // that value? part is only for gzip
			 		 	 ['set']({'$display': function(oldVal) {                                // set for 2nd time: now we get the stylesheet's $display
			 		 		 return oldVal == 'none' ? 'block' : oldVal;
			 			 }}); 
				 else 
					 self['set']({'$display': 'none'});
			 }
		 	 else if (name == '$$') {
					self['set']('@style', value);
			 }
			 else
				 flexiEach(this, function(obj, c) { 
					 var newValue = isFunction(value) ? value($(obj)['get'](name), c, obj) : value;
					 if (prefix == '$') {
						 if (match[2])
							 obj['style'][match[2]] = newValue;
						 else {
							 flexiEach(newValue && newValue.split(/\s+/), function(clzz) { 
								 var cName = replace(clzz, /^[+-]/);

								 if (/^\+/.test(clzz))
								 obj['classList'].add(cName);
								 else if (/^-/.test(clzz))
								 obj['classList'].remove(cName);
								 else
								 obj['classList'].toggle(cName);
							 });
						 }
					 }
   				 	 else if (name == '$$scrollX')
			 			 obj['scroll'](newValue, $(obj)['get']('$$scrollY'));
   				 	 else if (name == '$$scrollY')
			 			 obj['scroll']($(obj)['get']('$$scrollX'), newValue);
					 else if (prefix == '@') {
						 if (newValue == _null)  
							 obj.removeAttribute(match[2]);
						 else
						 obj.setAttribute(match[2], newValue);
					 }
					 else
						 obj[match[2]] = newValue;
				 });
		 }
		 else if (isString(name) || isFunction(name))
			 self['set']('$', name);
		 else
			 eachObj(name, function(n,v) { self['set'](n, v); });
		 return self;
	 },

	/*$
	 * @id animate
	 * @group ANIMATION
	 * @requires loop dollar dial get
	 * @configurable default
	 * @name .animate()
	 * @syntax list.animate(properties)
	 * @syntax list.animate(properties, durationMs)
	 * @syntax list.animate(properties, durationMs, linearity)
	 * @syntax list.animate(properties, durationMs, interpolationFunc)
 	 * @module WEB
	 * Animates the items of the list by modifying their properties, CSS styles and attributes. <var>animate()</var> can work with numbers, strings that contain exactly one
	 * number, and with colors in the CSS notations 'rgb(r,g,b)', '#rrggbb' or '#rgb'.
	 *
	 * When you invoke the function, it will first read all old values from the object and extract their numbers and colors. These start values will be compared to 
	 * the destination values that have been specified in the given properties. Then <var>animate()</var> will create a background task using ##$.loop() that updates the 
	 * specified properties in frequent intervals so that they transition to their destination values.
	 *
	 * The start values will be obtained using ##get(). It is recommended to set the start values using ##set() before you start the animation, even if this is not
	 * always required.
	 *
	 * You can define the kind of transition using the <var>linearity</var> parameter. If you omit it or pass 0, animate's default algorithm will cause a smooth transition
	 * from the start value to the end value. If you pass 1, the transition will be linear, with a sudden start and end of the animation. Any value between 0 and 1 
	 * is also allowed and will give you a transition that is 'somewhat smooth'. 
	 * 
	 * Instead of the <var>linearity</var> function you can provide your own interpolation <code>function(startValue, endValue, t)</code> which will be
	 * called every time an interpolated value is required. <var>startValue</var> and <var>endValue</var> define the start and end values. <var>t</var>
	 * is a value between 0 and 1 that specifies the current state of the transition. The function must return the <var>startValue</var> for 0 and 
	 * the <var>endValue</var> for 1. For values between 0 and 1, the function should return a transitional value.
	 *
	 * If the start value of a property is a string containing a number, <var>animate()</var> will always ignore all the surrounding text and use the destination value as a template 
	 * for the value to write. This can cause problems if you mix units in CSS. For example, if the start value is '10%' and you specify an end value of '20px', animate
	 * will do an animation from '10px' to '20px'. It is not able to convert units. 
	 *
	 * <var>animate()</var> does not only support strings with units, but any string containing exactly one number. This allows you, among other things, to work with 
	 * IE-specific CSS properties.
	 * For example, you can transition from a start value 'alpha(opacity = 0)' to 'alpha(opacity = 100)'. 
	 *
	 * When you animate colors, <var>animate()</var> is able to convert between the three notations rgb(r,g,b), #rrggbb or #rgb. You can use them interchangeably, but you can not 
	 * use color names such as 'red'.
	 *
	 * Instead of the end value, you can also specify a <code>function(oldValue, index, obj)</code> to calculate the actual end value. 
	 *
	 * To allow more complex animation, <var>animate()</var> returns a ##promiseClass#Promise## that is fulfilled when the animation has finished. You can also stop
	 * a running animation by calling the promise's ##stop() function. If you only use the Web module, <var>stop()</var> is only available in the promise returned by
	 * <var>animate()</var>. If you have the full package, the stop function will be propagated and can be called at any point of a promise chain.
	 *
	 * @example Move an element:
	 * <pre>
	 * $('#myMovingDiv').set({$left: '0px', $top: '0px'})                // start values
	 *                  .animate({$left: '50px', $top: '100px'}, 1000);  // animation
	 * </pre>
	 *
	 * @example Change the color of an element:
	 * <pre>
	 * $('#myBlushingDiv').set({$backgroundColor: '#000000'})
	 *                    .animate({$backgroundColor: '#ff0000'}, 1000);
	 * </pre>
	 * 
	 * @example Using a function to calulate the values for animation:
	 * <pre>
	 * $('#myMovingDiv').animate({$left: function(v) { return (parseFloat(v) + 100) + 'px'; }}, 1000);  
	 * </pre>
	 * 
	 * @example Fade-out effect:
	 * <pre>
	 * $('#myFadingDiv').animate({$$fade: 0}, 1000);
	 * </pre>
	 * 
 	 * @example Slide-in effect:
	 * <pre>
	 * $('#myInvisibleDiv').animate({$$show:1, $$slide: 1}, 1000);
	 * </pre>
	 *
	 *
	 * @example Stopping a simple animation. This requires only the Web module.
	 * <pre>
	 * var div = $('#myMovingDiv').set({$left: '0px', $top: '0px'});
	 * var p = div.animate({$left: '800px', $top: '0px'}, 5000, 0);
	 * $('#stopButton').on('click', p.stop);
	 * });
	 * </pre>
	 *
	 * @example Chained animation using ##promiseClass#Promise## callbacks. The element is first moved to the position 200/0, then to 200/200
	 *          and finally moves to 100/100.
	 *          A stop button allows you to interrupt the animation.<br/>
	 *          Please note that while chaining animations requires only the Web module,  
	 *          stopping a chained animation requires the full distribution with both Web and Util module. Only the complete Promises implementation 
	 *          supports this.
	 * <pre>
	 * var div = $('#myMovingDiv').set({$left: '0px', $top: '0px'});
	 * var p = div.animate({$left: '200px', $top: '0px'}, 600, 0)
	 *    .then(function() {
	 *           return div.animate({$left: '200px', $top: '200px'}, 800, 0);
	 *    }).then(function() {
	 *           return div.animate({$left: '100px', $top: '100px'}, 400);
	 *    });
	 *    
	 *  $('#stopButton').on('click', p.stop); // stopping requires Web+Util modules!
	 * });
	 * </pre>
	 *
	 *
	 * @param properties a property map describing the end values of the corresponding properties. The names can use the
	 *                   set() syntax ('@' prefix for attributes, '$' for styles, '$$fade' for fading,  '$$slide' for slide effects, 
	 *                   '$$scrollX' and '$$scrollY' for scroll coordinates). 
	 *                   Values must be either numbers, numbers with units (e.g. "2 px") or colors ('rgb(r,g,b)', '#rrggbb' or '#rgb') or
	 *                   a <code>function(oldValue, index, obj)</code>  to determine the new value. The function  will be invoked for each list element 
	 *                   to evaluate the new value: 
	 *                   <dl><dt>oldValue</dt><dd>The old value of the property to be changed, as returned by ##get().
	 *                   For the CSS style names, this is the computed style of the property </dd>
	 *                   <dt>index</dt><dd>The list index of the object owning the property</dd>
	 *                   <dt>obj</dt><dd>The list element owning the property.<dd>
	 *                   <dt class="returnValue">(callback return value)</dt><dd>The destination value to be set.</dd></dl> 
	 * @param durationMs optional the duration of the animation in milliseconds. Default: 500ms.
	 * @param linearity optional defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0.
	 * @param interpolationFunc optional an interpolation <code>function(startValue, endValue, t)</code> which will be
	 *             called every time an interpolated value is required:
	 *             <dl>
	 *             <dt>startValue</dt><dd>The start value of the transition.</dd>
	 *             <dt>endValue</dt><dd>The end value of the transition.</dd>
	 *             <dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
	 *             <dt class="returnValue">(callback return value)</dt><dd>The value at the time <var>t</var>.</dd>
	 *             </dl> 
	 * @return a ##promiseClass#Promise## object to monitor the animation's progress. 
	 *         It is fulfilled when the animation ended, and rejected if the animation had been stopped.
	 *         The fulfillment handler will be called as <code>function(list)</code>:
	 *         <dl><dt>list</dt><dd>A reference to the animated list.</dd></dl> 
	 *         The rejection handler is called as <code>function()</code> without arguments. 
	 *         The returned promise also has property 'stop', which is a function. Invoke the function without arguments to
	 *         interrupt a running animation. It will return the animations actual duration in ms. 
	 *         
	 * @see ##toggle() can be used to define animations between two states.
	 * @see ##$.loop() allows you to write more complex animations.
	 */	
	'animate': function (properties, duration, linearity) {
		var prom = promise(); 
		var self = this;
		var dials = collector(flexiEach, this, function(li, index) {
			var elList = $(li), dialStartProps, dialEndProps = {};
			eachObj(dialStartProps = elList.get(properties), function(name, start) {
				var dest = properties[name];
				dialEndProps[name] = isFunction(dest) ? dest(start, index, li) : 
					name == '$$slide' ? getNaturalHeight(elList, dest) : dest;
			});
			return elList['dial'](dialStartProps, dialEndProps, linearity);
		});

		var durationMs = duration || 500;
		var loopStop;

		// @condblock !promise
		prom['stop'] = function() { prom['fire'](false); return loopStop(); };
		// @condend
		// @cond promise prom['stop0'] = function() { prom['fire'](false); return loopStop(); };

		// start animation
		loopStop = $.loop(function(timePassedMs) {
			callList(dials, [timePassedMs/durationMs]);

			if (timePassedMs >= durationMs) {
				loopStop();
				prom['fire'](true, [self]);
			}
		});
		return prom;		
	},

	/*$
	 * @id dial
	 * @group ANIMATION
	 * @requires get set
	 * @configurable default
	 * @name .dial()
	 * @syntax list.dial(state1, state2)
	 * @syntax list.dial(state1, state2, linearity)
	 * @syntax list.dial(state1, state2, interpolationFunc)
	 * @module WEB
	 * 
	 * Creates a function allows you to set all list members to one of two states or any transitional state between them. 
	 * The states are specified using ##set() - compatible object maps containing the properties to set.
	 * Pass 0 to the function to set the first state for all list members, or 1 to set the second state.
	 * Any value between 0 and 1 will cause <var>dial()</var> to interpolate between the two states.
	 * Interpolation is supported for all numeric values, including those that have a string suffix (e.g. 'px' unit), 
	 * and for colors in all RGB notations (e.g. '#f00', '#f0d1ff' or 'rgb(23,0,100)').
	 *
	 * You can use the optional third parameter to define the kind of interpolation to use for values between 0 and 1.
	 * If 0, the dial uses a smooth, cubic interpolation. For 1 it uses linear interpolation. Values between 0 and 1
	 * will mix both algorithms. You can also specify your own interpolation function.
	 *
	 * @example Creates a dial function that changes the background color of the page.
	 * <pre>
	 * var light = $('body').dial({$backgroundColor: #000}, {$backgroundColor: #fff});
	 * light(0);     // set the first state (background color to #000)
	 * light(1);     // sets second state (background color to #fff).
	 * light(0.5);  // interpolates between two states, sets background color to #888.
	 * light(0.25);  // interpolates between two states, sets background color to #444.
	 * </pre>
	 * 
	 * @param state1 a property map in ##set() syntax describing the first state of the properties. The properties will be set for all elements of the list.
	 * @param state2 a property map describing the second state of the properties. Uses ##set() syntax. 
	 * @param linearity optional defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0. Ignored if durationMs is 0.
	 * @param interpolationFunc optional an interpolation <code>function(startValue, endValue, t)</code> which will be called every time
	 *       an interpolated value is required: 
	 *           <dl>
 	 *             <dt>startValue</dt><dd>The start value of the transition.</dd>
 	 *             <dt>endValue</dt><dd>The end value of the transition.</dd>
 	 *           <dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
 	 *             <dt class="returnValue">(callback return value)</dt><dd>The value at the time <var>t</var>.</dd>
 	 *             </dl> 		 
 	 * @return a dial function <code>function(newPosition)</code> that will set the state.
	 *             <dl>
	 *             <dt>newPosition</dt><dd>If 0 or lower, set the list members to the first state. 
	 *             If 1 or higher, sets them to the second state. For any value betweeen 0 and 1, the list members
	 *             will be set to interpolated values.</dd>
	 *             </dl>
	 *             
	 * @see ##toggle() is a related function that allows you to define two states and automatically animate between them.
	 */
	'dial': function (properties1, properties2, linf) {
		var self = this;
		var linearity = linf || 0;
		var interpolate = isFunction(linearity) ? linearity : function(startValue, endValue, t) {
			return t * (endValue - startValue) * (linearity + (1-linearity) * t * (3 - 2*t)) + startValue; 
		};

		function getColorComponent(colorCode, index) {
			return (/^#/.test(colorCode)) ?
				parseInt(colorCode.length > 6 ? colorCode.substr(index*2+1, 2) : ((colorCode=colorCode.charAt(index+1))+colorCode), 16)
				:
				extractNumber(colorCode.split(',')[index]);
		}
		return function(t) {
			eachObj(properties1, function(name, start) {
				var end=properties2[name], i = 0; 
				self['set'](name, t<=0?start:t>=1?end:
					 (/^#|rgb\(/.test(end)) ? // color in format '#rgb' or '#rrggbb' or 'rgb(r,g,b)'?
								('rgb('+ Math.round(interpolate(getColorComponent(start, i), getColorComponent(end, i++), t)) // expression repeated, gzip will do the rest
								+ ',' + Math.round(interpolate(getColorComponent(start, i), getColorComponent(end, i++), t))
								+ ',' + Math.round(interpolate(getColorComponent(start, i), getColorComponent(end, i++), t))
							    + ')')
							:
								replace(end, /-?[\d.]+/, toString(interpolate(extractNumber(start), extractNumber(end), t)))
				);
			});
		};
	},

	/*$
	 * @id toggle
	 * @group ANIMATION
	 * @requires animate set
	 * @configurable default
	 * @name .toggle()
	 * @syntax list.toggle(cssClasses)
	 * @syntax list.toggle(state1, state2)
	 * @syntax list.toggle(state1, state2, durationMs)
	 * @syntax list.toggle(state1, state2, durationMs, linearity)
	 * @syntax list.toggle(state1, state2, durationMs, interpolationFunction)
	 * @module WEB
	 * 
	 * Creates a function that switches between the two given states for the list. The states use the ##set() property syntax. You can also
	 * just pass a string of CSS classes, as you do with <var>set()</var>.
	 *
	 * If no duration is given, the returned function changes the state immediately using ##set(). If a duration has been passed, the returned function
	 * uses ##animate() to smoothly transition the state. If the returned function is invoked while an animation is running, it interrupts the 
	 * animation and returns to the other state.
	 *
	 *
	 * @example Creates a toggle function that changes the background color of the page.
	 * <pre>
	 * var light = $('body').set({$backgroundColor: #000}, {$backgroundColor: #fff});
	 * light();      // toggles state to second state
	 * light(false); // sets first state (background color to #000).
	 * light(true);  // sets second state (background color to #fff).
	 * light();      // toggles state to first state
	 * </pre>
	 * 
	 * @example Takes the previous function, but adds it as an onclick event handler that toggles the color.
	 * <pre>
	 * var light = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff});
	 * $('#mySwitch').on('click', light);
	 * </pre>
	 *
	 * @example Using an animated transition by passing a duration:
	 * <pre>
	 * var dimmer = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff}, 500);
	 * $('#mySwitch').on('click', dimmer);
	 * </pre>
	 *
	 * @example Toggling CSS classes using the full syntax:
	 * <pre>
	 * var t = $('#myElement').toggle({$: '-myClass1 -myClass2'}, {$: '+myClass1 +myClass2'});
	 * $('#myController').on('click', t);
	 * </pre>
	 *
	 * @example There is a shortcut for toggling CSS classes. Just list them space-separated in a string:
	 * <pre>
	 * var t = $('#myElement').toggle('myClass1 myClass2');
	 * </pre>
	 * 
	 * @param cssClasses a string containing space-separated CSS class names to toggle. Classes are disabled in the first state
	 *                   and enabled in the second.
	 * @param state1 a property map in ##set() syntax describing the initial state of the properties. The properties will automatically be set when the
	 *                   <var>toggle()</var> function is created. The properties will be set for all elements of the list.
	 * @param state2 a property map describing the second state of the properties. Uses ##set() syntax, like the other state. 
	 * @param durationMs optional if set, the duration of the animation in milliseconds. By default, there is no animation and the 
	 * 					 properties will be changed immediately.
	 * @param linearity optional defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0. Ignored if durationMs is 0.
	 * @param interpolationFunc optional an interpolation <code>function(startValue, endValue, t)</code> for the animation which will be called every 
	 *     time an interpolated value is required: 
	 *           <dl>
 	 *             <dt>startValue</dt><dd>The start value of the transition.</dd>
 	 *             <dt>endValue</dt><dd>The end value of the transition.</dd>
 	 *           <dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
 	 *             <dt class="returnValue">(callback return value)</dt><dd>The value at the time <var>t</var>.</dd>
 	 *             </dl> 		 
 	 * @return a toggle function <code>function(newState)</code> that will toggle between the two states, or set a specific state.
	 *             <dl>
	 *             <dt>newState (optional)</dt><dd>If a boolean <var>true</var> or <var>false</var> is given, 
	 *             the toggle will set the first or second state respectively. If called with any other value, or without a value,
	 *             the function toggles to the other state.</dd>
	 *             </dl>
	 *             
	 * @see ##dial() is a similar function that allows you to smoothly interpolate between two states.
	 *
	 */
	'toggle': function(stateDesc1, stateDesc2, durationMs, linearity) {
		var self = this;
		var state = false;
		var promise;
		var stateDesc;

		if (stateDesc2) {
			self['set'](stateDesc1);
			return function(newState) {
					if (newState !== state) {
						stateDesc = (state = (newState===true||newState===false ? newState : !state)) ? stateDesc2 : stateDesc1;

						if (durationMs) 
							(promise = self['animate'](stateDesc, promise ? promise['stop']() : durationMs, linearity))['then'](function(){promise=_null;});
						else
							self['set'](stateDesc);
					}
				};
		}
		else
			return self['toggle'](replace(stateDesc1, /\b(?=\w)/g, '-'), replace(stateDesc1, /\b(?=\w)/g, '+'));
	},

 	/*$
 	 * @stop
 	 */
		dummyTrigger:0
		,
		///#/snippet webListFuncs
	///#snippet extrasListFuncs

		/*$
		 * @stop
		 */
		dummyHt:0
	///#/snippet extrasListFuncs
	}, M.prototype);

	//// DOLLAR FUNCTIONS ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	copyObj({
	///#snippet webDollarFuncs
	/*$
	* @id request
	* @group REQUEST
	* @requires 
	* @configurable default
	* @name $.request()
	* @syntax $.request(method, url)
	* @syntax $.request(method, url, data)
	* @syntax $.request(method, url, data, settings)
	* @module WEB
	* Initiates a HTTP request to the given URL, using XMLHttpRequest. It returns a ##promiseClass#Promise## object that allows you to obtain the result.
	* 
	* @example Invokes a REST web service and parses the resulting document using JSON:
	* <pre>
	* $.request('get', 'http://service.example.com/weather', {zipcode: 90210})
	*    .then(function(txt) {
	*         var json = $.parseJSON(txt);
	*         $('#weatherResult').fill('Today's forecast is is: ' + json.today.forecast);
	*    })
	*    .error(function(status, statusText, responseText) {
	*         $('#weatherResult').fill('The weather service was not available.');
	*    });
	* </pre>
	* 
	* @example Sending a JSON object to a REST web service:
	* <pre>
	* var myRequest = {         // create a request object that can be serialized via JSON
	*      request: 'register',
	*      entries: [
	*        {name: 'Joe',
	*      	    job: 'Plumber'
	*        }
	*      ]};
	* 
	* function failureHandler() {
	*   $('#registrationResult').fill('Registration failed');
	* }
	*
	* $.request('post', 'http://service.example.com/directory', $.toJSON(myRequest))
	*     .then(function(txt) {
	*        if (txt == 'OK')
	*             $('#registrationResult').fill('Registration succeeded');
	*        else
	*              failureHandler();
	*        })
	*     .error(failureHandler);
	* </pre>
	* 
	* @example Using HTTP authentication and a custom XMLHttpRequest property.
	* <pre>var handler = $.request('get', 'http://service.example.com/userinfo', null, {xhr: {withCredentials: true}, user: 'me', pass: 'secret'});</pre>
	*
	* 
	* @param method the HTTP method, e.g. 'get', 'post' or 'head' (rule of thumb: use 'post' for requests that change data 
	*             on the server, and 'get' to request data). Not case sensitive.
	* @param url the server URL to request. May be a relative URL (relative to the document) or an absolute URL. Note that unless you do something 
	*             fancy on the server (keyword to google:  Access-Control-Allow-Origin), you can only call URLs on the server your script originates from.
	* @param data optional data to send in the request, either as POST body or as URL parameters. It can be either a plain object as map of 
	*             parameters (for all HTTP methods), a string (for all HTTP methods), a DOM document ('post' only) or a FormData object ('post' only). 
	*             If the method is 'post', it will be sent as body, otherwise parameters are appended to the URL. In order to send several parameters with the 
	*             same name, use an array of values in the map. Use null as value for a parameter without value.
	* @param settings optional a map of additional parameters. Supports the following properties (all optional):
	* <dl><dt>headers</dt><dd>a map of HTTP headers to add to the request. Note that you should use the proper capitalization for the
	*                header 'Content-Type', if you set it, because otherwise it may be overwritten.</dd>
	* <dt>xhr</dt><dd>a map of properties to set in the XMLHttpRequest object before the request is sent, for example <code>{withCredentials: true}</code>.</dd>
	* <dt>user</dt><dd>username for HTTP authentication, together with the <var>pass</var> parameter</dd>
	* <dt>pass</dt><dd>password for HTTP authentication, together with the <var>user</var> parameter</dd>
	* </dl>
	* @return a ##promiseClass#Promise## containing the request's status. If the request has successfully completed with a HTTP status 2xx, 
	*         the promise's completion handler will be called as <code>function(text, xhr)</code>:
	*         <dl><dt>text</dt><dd>The response sent by the server as text.</dd>
	*         <dt>xhr</dt><dd>The XMLHttpRequest used for the request. This allows you to retrieve the response in different
	*         formats (e.g. <var>responseXml</var> for an XML document</var>), to retrieve headers and more.</dd></dl>
	*         The failure handler will be called as <code>function(statusCode, statusText, text)</code>:
	*         <dl><dt>statusCode</dt><dd>The HTTP status (never 200; 0 if no HTTP request took place).</dd>
	*         <dt>text</dt><dd>The response's body text, if there was any, or the exception as string if the browser threw one.</dd>
	*         <dt>xhr</dt><dd>The XMLHttpRequest used for the request. This allows you to retrieve the response in different
	*         formats (e.g. <var>responseXml</var> for an XML document</var>), to retrieve headers and more..</dd></dl>
	*         The returned promise supports ##stop(). Calling <var>stop()</var> will invoke the XHR's <var>abort()</var> method.
	*         The underlying XmlHttpRequest can also be obtained from the promise's <var>xhr</var> property.
	*         
	* @see ##values() serializes an HTML form in a format ready to be sent by <var>$.request</var>.
	* @see ##$.parseJSON() can be used to parse JSON responses.
	* @see ##$.toJSON() can create JSON messages.
	* @see ##_.format() can be useful for creating REST-like URLs, if you use JavaScript's built-in <var>escape()</var> function.
	*/
	'request': function (method, url, data, settings0) {
		var settings = settings0 || {}; 
		var xhr, callbackCalled = 0, prom = promise(), dataIsMap = data && (data['constructor'] == settings['constructor']);
		try {
			prom['xhr'] = xhr = new XMLHttpRequest();

			// @condblock !promise
			prom['stop'] = function() { xhr['abort'](); };
			// @condend promise 
			// @cond promise prom['stop0'] = function() { xhr['abort'](); };
			// @condend

			if (dataIsMap) { // if data is parameter map...
				data = collector(eachObj, data, function processParam(paramName, paramValue) {
					return collector(flexiEach, paramValue, function(v) { 
						return encodeURIComponent(paramName) + ((v != _null) ?  '=' + encodeURIComponent(v) : '');
					});
				}).join('&');
			}

			if (data != _null && !/post/i.test(method)) {
				url += '?' + data;
				data = _null;
			}

			xhr['open'](method, url, true, settings['user'], settings['pass']);
			if (dataIsMap && /post/i.test(method))
				xhr['setRequestHeader']('Content-Type', 'application/x-www-form-urlencoded');

			eachObj(settings['headers'], function(hdrName, hdrValue) {
				xhr['setRequestHeader'](hdrName, hdrValue);
			});
			eachObj(settings['xhr'], function(name, value) {
				xhr[name] = value;
			});

			xhr['onreadystatechange'] = function() {
				if (xhr['readyState'] == 4 && !callbackCalled++) {
					if (xhr['status'] >= 200 && xhr['status'] < 300)
						prom['fire'](true, [xhr['responseText'], xhr]);
					else
						prom['fire'](false, [xhr['status'], xhr['responseText'], xhr]);
				}
			};

			xhr['send'](data);
		}
		catch (e) {
			if (!callbackCalled) 
				prom['fire'](false, [0, _null, toString(e)]);
		}

		return prom;
	},

	/*
	 * JSON Module. Uses browser built-ins or json.org implementation if available. Otherwise its own implementation,
	 * originally based on public domain implementation http://www.JSON.org/json2.js / http://www.JSON.org/js.html.
	 * Extremely simplified code, made variables local, removed all side-effects (especially new properties for String, Date and Number).
	 */

	/*$
	* @id loop
	* @group ANIMATION
	* @requires animation_vars 
	* @configurable default
	* @name $.loop()
	* @syntax $.loop(paintCallback)
	* @module WEB
	* Runs an animation loop. The given callback method will be invoked repeatedly to create a new animation frame.
	* In modern browsers, <var>requestAnimationFrame</var> will be used to invoke the callback every time the browser is ready for a new 
	* animation frame. 
	* The exact frequency is determined by the browser and may vary depending on factors such as the time needed to 
	* render the current page, the screen's framerate and whether the page is currently visible to the user. 
	* In older browsers the callback function will be invoked approximately every 33 milliseconds.
	* 
	* An animation loop runs indefinitely. To stop it, you have two options:
	* <ul><li>Invoke the <var>stop()</var> function that <var>$.loop()</var> that will return.</li>
	* <li>The animation callback receives the same <var>stop()</var> function as second argument, so the callback can end the animation itself.</li>
	* </ul>
	*
	* @example Animates a div by moving along in a circle.
	* <pre>
	*   var myDiv = $$('#myAnimatedDiv');
	*   var rotationsPerMs = 1000;                           // one rotation per second
	*   var radius = 100;
	*   var d = 3000;                                        // duration in ms
	*   $.loop(function(t, stopFunc) {
	*     var a = 2 * Math.PI * Math.min(t, d) / rotationsPerMs; // angular position
	*     myDiv.style.left = (radius * Math.cos(a) + ' px';
	*     myDiv.style.top = (radius * Math.sin(a) + ' px';
	*     if (t > d)                                         // time is up: call stopFunc()!
	*       stopFunc();
	*   });
	* </pre>
	*
	* @param paintCallback a callback <code>function(timestamp, stopFunc)</code> that will be invoked repeatedly to prepare a frame. Parameters given to callback:
	* <dl>
	*            <dt>timestamp</dt><dd>The number of miliseconds since the animation's start (possibly as high-precision double, if the browser supports this).</dd>
	*            <dt>stop</dt><dd>Call this <code>function()</code> to stop the currently running animation.</dd>
	* </dl>
	* The callback's return value will be ignored.
	* @return a <code>function()</code> that stops the currently running animation. This is the same function that is also given to the callback.
	* 
	* @see ##animate() for simple, property-based animations.
	*/
	'loop': function(paintCallback) {
		var startTimestamp;
		var currentTime = 0;
		var id = idSequence++;
		var requestAnim = _window['requestAnimationFrame'] || function(f) { setTimeout(function() { f(+new Date()); }, 33); }; // 30 fps as fallback
		function raFunc(ts) {
			eachObj(animationHandlers, function(id, f) { f(ts); });
			if (animationHandlerCount) 
				requestAnim(raFunc);
		}; 
		function stop() {
			if (animationHandlers[id]) {
				delete animationHandlers[id];
				animationHandlerCount--;
			}
			return currentTime;
		} 
		animationHandlers[id] = function(ts) {
			startTimestamp = startTimestamp || ts;
			paintCallback(currentTime = ts - startTimestamp, stop);
		};

		if (!(animationHandlerCount++)) 
			requestAnim(raFunc);
		return stop; 
	},

 	/*$
 	 * @stop
 	 */
	dummyOff:null
	,
	///#/snippet webDollarFuncs
		///#snippet extrasDollarFuncs

		/*$
		 * @stop
		 */
		dummyWait:0

		///#/snippet extrasDollarFuncs
	}, $);

	//// UNDERSCORE FUNCTIONS ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	copyObj({
		///#snippet utilUnderscoreFuncs

		/*$
		 * @stop
		 */

		dummyFormatHtml:0
		,

	///#/snippet utilUnderscoreFuncs
		///#snippet extrasUnderscoreFuncs

		/*$
		 * @stop
		 */
		dummyPromise:0

		///#/snippet extrasUnderscoreFuncs
	}, _);

	////INITIALIZATION ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///#snippet webInit
	/*$
	 @stop
	 */


	///#/snippet webInit

	return {
	///#snippet extrasExports

		/*$
		 * @stop
		 */

		///#/snippet extrasExports
		///#snippet utilExports
		/*$
		 * @stop 
		 */
		///#/snippet utilExports
	///#snippet webExports

		/*$
		 * @id dollar
		 * @group SELECTORS
		 * @requires  
		 * @dependency yes
		 * @name $()
		 * @syntax $()
		 * @syntax $(selector)
		 * @syntax $(selector, context)
		 * @syntax $(selector, context, childOnly)
		 * @syntax $(list)
		 * @syntax $(list, context)
		 * @syntax $(list, context, childOnly)
		 * @syntax $(object)
		 * @syntax $(object, context)
		 * @syntax $(object, context, childOnly)
		 * @syntax $(domreadyFunction)
	 	 * @module WEB
		 * Creates a new ##list#Minified list##, or register a DOMReady-handler. 
		 * The most common usage is with a CSS-like selector. <var>$()</var> will then create a list containing all elements of the current HTML
		 * document that fulfill the filter conditions. Alternatively you can also specify a list of objects or a single object. 
		 * Nested lists will automatically be flattened, and nulls will automatically be removed from the resulting list.
		 * If you call <var>$()</var> without any arguments, it will return an empty list.
		 * 
		 * Additionally, you can specify a second argument to provide a context. Contexts only make sense if you selected 
		 * HTML nodes with the first parameter. Then the context limits the resulting list to include only those nodes 
		 * that are descendants of the context nodes. The context can be either a selector, a list or a single HTML node, and will be 
		 * processed like the first argument. A third arguments allows you to limit the list to 
		 * only those elements that are direct children of the context nodes (so a child of a child would be filtered out).
		 *
		 * The lists created by <var>$()</var> are the same type as the ##list#Minified lists## created by Util's #underscore#_() constructor and other
		 * Util methods. All Util methods work on lists created by <var>$()</var>. If you want to add your own methods to those lists,
		 * use ##M#MINI.M##.
		 * 
		 * As a special shortcut, if you pass a function to <var>$()</var>, it will be registered using #ready#$.ready() to be executed 
		 * when the DOM model is complete.
		 *
		 * @example A simple selector to find an element by id.
		 * <pre>
		 * var l0 = $('#myElementId');
		 * </pre>
		 * 	 
		 * @example You can pass an object reference to create a list containing only this element:
		 * <pre>
		 * var l1 = $(document.getElementById('myElementId')); 
		 * </pre>
		 *
		 * @example Lists and arrays will be copied:
		 * <pre>
		 * var l2 = $([elementA, elementB, elementC]); 
		 * </pre>
		 * 	 
		 * @example Lists will be automatically flattened and nulls removed. So this list <var>l3</var> has the same content as <var>l2</var>:
		 * <pre>
		 * var l3 = $([elementA, [elementB, null, elementC], null]); 
		 * </pre>
		 * 	 
		 * @example This is a simple selector to find all elements with the given class.
		 * <pre>
		 * var l4 = $('.myClass');
		 * </pre>
		 * 	 
		 * @example A selector to find all elements of the given type.
		 * <pre>
		 * var l5 = $('input'); // finds all input elements
		 * </pre>
		 * 	 
		 * @example A selector to find all elements with the given type and class.
		 * <pre>
		 * var l6 = $('input.myRadio'); // finds all input elements with class 'myRadio'
		 * </pre>
		 * 	 
		 * @example A selector to find all elements that are descendants of the given element.
		 * <pre>
		 * var l7 = $('#myForm input'); // finds all input elements contained in the element myForm
		 * </pre>
		 * 	 
		 * @example A selector to find all elements that have either a CSS class 'a' or class 'b':
		 * <pre>
		 * var l8 = $('.a, .b'); // finds all elements that have class a or class b
		 * </pre>
		 * 	 
		 * @example A selector that finds all elements that are descendants of the element myDivision, are inside an element with the
		 * class .myForm and are input elements:
		 * <pre>
		 * var l9 = $('#myDivision .myForm input'); 
		 * </pre>
		 * 	 
		 * @example Contexts can make it easier to specify ancestors:
		 * <pre>
		 * var l10 = $('.myRadio', '#formA, #formB, #formC'); 
		 * </pre>
		 * The result is identical to:
		 * <pre>
		 * var l10 = $('#formA .myRadio, #formB .myRadio, #formC .myRadio'); 
		 * </pre>
		 * 
		 * @example Using one of the list functions, ##set(), on the list, and setting the element's text color. '$' at the beginning of the property name sets a CSS value.
		 * <pre>
		 * $('#myElementId').set('$color', 'red');
		 * </pre>
		 *
		 * @example Most list methods return the list you invoked them on, allowing you to chain them:
		 * <pre>
		 * $('#myForm .myRadio').addClass('uncheckedRadio')
		 *                      .set('checked', true)
		 *                      .on('click', function() {
		 *                             $(this).set({@: 'uncheckedRadio');
		 *                      });
		 * </pre>
		 * 
		 * @example Using $() as a #ready#$.ready() shortcut:
		 * <pre>
		 * $(function() {
		 *   // in here you can safely work with the HTML document
		 * });
		 * </pre>
		 * 
		 * @param selector a simple, CSS-like selector for HTML elements. It supports '#id' (lookup by id), '.class' (lookup by class),
		 *             'element' (lookup by elements) and 'element.class' (combined class and element). Use commas to combine several selectors.
		 *             You can also join two or more selectors by space to find elements which are descendants of the previous selectors.
		 *             For example, use 'div' to find all div elements, '.header' to find all elements containing a class name called 'header', and
		 *             'a.popup' for all a elements with the class 'popup'. To find all elements with 'header' or 'footer' class names, 
		 *             write '.header, .footer'. To find all divs elements below the element with the id 'main', use '#main div'.
		 *             The selector "*" will return all elements.
		 * @param list a list to copy. It can be an array, another Minified list, a DOM nodelist or anything else that has a <var>length</var> property and
		 *             allows read access by index. A shallow copy of the list will be returned. Nulls will be automatically removed from the copy. Nested lists 
		 *             will be flattened, so the result only contains nodes.
		 * @param object an object to create a single-element list containing only the object. If the argument is null, an empty list will be returned.
		 * @param domreadyFunction a function to be registered using #ready#$.ready().
		 * @param context optional an optional selector, node or list of nodes which specifies one or more common ancestor nodes for the selection. The context can be specified as
		 *             a selector, a list or using a single object, just like the first argument.
		 *             The returned list will contain only descendants of the context nodes. All others will be filtered out. 
		 * @param childOnly optional if set, only direct children of the context nodes are included in the list. Children of children will be filtered out. If omitted or not 
		 *             true, all descendants of the context will be included. 
		 * @return the array-like ##list#Minified list## object containing the content specified by the selector. 
		 *             Please note that if the first argument was a list, the existing order will be kept. If the first argument was a simple selector, the nodes are in document order. 
		 *             If you combined several selectors using commas, only the individual results of the selectors will keep the document order, 
		 *             but will then be joined to form a single list. This list will
		 *             not be in document order anymore, unless you use a build without legacy IE support.
		 *             Duplicate nodes will be removed from selectors, but not from lists.
		 *             
		 * @see #underscore#_() is Util's alternative constructor for ##list#Minified lists##
		 * @see ##dollardollar#$$()## works like <var>$()</var>, but returns the resulting list's first element.
		 */
		'$': $,

		/*$
		 * @id dollardollar
		 * @group SELECTORS
		 * @requires 
		 * @configurable default
		 * @name $$()
		 * @syntax $(selector)
		 * @syntax $(selector, context)
		 * @syntax $(selector, context, childOnly)
		 * @shortcut $$() - It is recommended that you assign MINI.$$ to a variable $$.
	 	 * @module WEB
		 * Returns a DOM object containing the first match of the given selector, or <var>undefined</var> if no match was found. 
		 * <var>$$</var> allows you to easily access an element directly. It is the equivalent to writing <code>$(selector)[0]</code>.
		 *
		 * Please note that the function <var>$$</var> will not be automatically exported by Minified. You should always import it
		 * using the recommended import statement:
		 * <pre>
		 * var MINI = require('minified'), $ = MINI.$, $$ = MINI.$$, EE = MINI.EE;
		 * </pre>
		 * 
		 * @example Select the checkbox 'myCheckbox':
		 * <pre>
		 * $$('#myCheckbox').checked = true;
		 * </pre>
		 * 
		 * @param selector a simple, CSS-like selector for the element. Uses the same syntax as #dollar#$(). The most common
		 *                 parameter for this function is the id selector with the syntax "#id".
		 * @param context optional an optional selector, node or list of nodes which specifies one or more common ancestor nodes for the selection. The context can be specified as
		 *             a selector, a list or using a single object, just like the first argument.
		 *             The returned list will contain only descendants of the context nodes. All others will be filtered out. 
		 * @param childOnly optional if set, only direct children of the context nodes are included in the list. Children of children will be filtered out. If omitted or not 
		 *             true, all descendants of the context will be included. 
		 * @return a DOM object of the first match, or <var>undefined</var> if the selector did not return at least one match
		 * 
		 * @see ##dollar#$()## creates a list using the selector, instead of returning only the first result.
		 */
		'$$': $$,

		/*$
		 * @id M
		 * @name M
		 * @syntax MINI.M
	 	 * @module WEB, UTIL
		 * 
		 * Exposes the internal class used by all  ##list#Minified lists##. This is mainly intended to allow you adding your
		 * own functions.
		 * 
		 * @example Adding a function printLength() to <var>M</var>:
		 * <pre>
		 * MINI.M.prototype.printLength = function() { console.log(this.length); };
		 * </pre>
		 */
		'M': M,

		/*$
		 * @id getter
		 * @requires get
		 * @name MINI.getter
		 * @syntax MINI.getter
		 * @module WEB
		 * 
		 * Exposes a map of prefix handlers used by ##get(). You can add support for a new prefix in <var>get()</var>
		 * by adding a function to this map. The prefix can be any string consisting solely of non-alphanumeric characters
		 * that's not already used by Minified. 
		 * 
		 * You must not replace <var>getters</var> by a new map, but must always modify the existing map.
		 * 
		 * The function's signature is <code>function(list, name)</code> where
		 * <dl><dt>list</dt><dd>Is the Minified list to get the value from. By convention you should always use only the first element. The list is
		 *                      non-empty and the first elememt can't be null or undefined (get() automatically returns <var>undefined</var> in 
		 *                      all other case).</dd>
		 *     <dt>name</dt><dd>The name of the property. That's the part AFTER the prefix.</dd>
		 *     <dt class="returnValue">(callback return value)</dt><dd>The value to return to the user.</dd></dl>
		 * 
		 * @example Adding a shortcut '||' for accessing border style properties:
		 * <pre>
		 * MINI.getter['||'] = function(list, name) {
		 * 	return list.get('$border' + name.replace(/^[a-z]/, function(a) { return a.toUpperCase()});
		 * };
		 * 
		 * var borderColor = $('#box').get('||color'); // same as '$borderColor'
		 * var borderLeftRadius = $('#box').get('||leftRadius'); // same as '$borderLeftRadius'
		 * </pre>
		 *
		 * @example Adding XLink attribute support to get(). This is useful if you work with SVG. The prefix is '>'.
		 * <pre>
		 * MINI.getter['>'] = function(list, name) {
		 * 	return list[0].getAttributeNS('http://www.w3.org/1999/xlink', name);
		 * };
		 * 
		 * var xlinkHref = $('#svgLink').get('>href');
		 * </pre>
		 */
		'getter': getter,

		/*$
		 * @id setter
		 * @requires set
		 * @name MINI.setter
		 * @syntax MINI.setter
		 * @module WEB
		 * 
		 * Exposes a map of prefix handlers used by ##set(). You can add support for a new prefix in <var>set()</var>
		 * by adding a function to this map. The prefix can be any string consisting solely of non-alphanumeric characters
		 * that's not already used by Minified. 
		 * 
		 * You must not replace <var>setters</var> by a new map, but must always modify the existing map.
		 * 
		 * The function's signature is <code>function(list, name, value)</code> where
		 * <dl><dt>list</dt><dd>Is the Minified list to use.</dd>
		 *     <dt>name</dt><dd>The name of the property. That's the part AFTER the prefix.</dd>
		 *     <dt>value</dt><dd>Either the value to set, or a callback function to create the value that you must call for each
		 *     value (see ##set() ).</dd>
		 *     </dl>
		 *
		 * If you provide complete ##get() and ##set() support for a prefix, you are also able to use it in other Minified
		 * function such as ##animate() and ##toggle().
		 * 
		 * @example Adding a shortcut '||' for accessing border style properties. As it's just calling ##set() for an existing
		 * property, it is not required to extra code for the callback.
		 * <pre>
		 * MINI.setter['||'] = function(list, name, value) {
		 * 	list.set('$border' + name.replace(/^[a-z]/, function(a) { return a.toUpperCase()}, value);
		 * };
		 * 
		 * $('#box').set('||color', 'red');   // same as set('$borderColor', 'red')
		 * $('#box').set('||leftRadius', 4);  // same as set('$borderLeftRadius', 4)
		 * </pre>
		 *
		 * @example Adding XLink attribute support to set(). This is useful if you work with SVG. The prefix is '>'.
		 * <pre>
		 * MINI.setter['>'] = function(list, name, value) {
		 * 	list.each(function(obj, index) {
		 * 		var v;
		 * 		if (_.isFunction(value))
		 * 			v = value(obj.getAttributeNS('http://www.w3.org/1999/xlink', name), index, obj);
		 * 		else 
		 * 			v = value;
		 *		
		 *		if (v == null)
		 *			obj.removeAttributeNS('http://www.w3.org/1999/xlink', name);
		 *		else
		 *			obj.setAttributeNS('http://www.w3.org/1999/xlink', name, v);
		 *	});
		 * };
		 * 
		 * $('#svgLink').set('>href', 'http://minifiedjs.com/');
		 * </pre>
		 */
		'setter': setter
		/*$
		 * @stop 
		 */
		///#/snippet webExports
	};

///#snippet commonAmdEnd
});
///#/snippet commonAmdEnd
///#snippet  webDocs

/*$
 * @id list
 * @name Minified Lists
 * @module WEB, UTIL
 * 
 * <i>Minified lists</i> are Array-like objects provided by Minified. Like a regular JavaScript array, 
 * they provide a <var>length</var> property and you can access their content using the index operator (<code>a[5]</code>). 
 * However, they do not provide the same methods as JavaScript's native array and are designed to be immutable, so
 * there is no direct way to add something to a Minified list. Instead Minified provides a number of functions and methods
 * that take a list and create a modified copy which, for example, may contain additional elements.
 *
 * Minified lists are typically created either using the Web module's #dollar#$()</a></code> function or with the Util module's
 * #underscore#_()</a></code> function, but many functions in the Util module also return a Minified list.
 * 
 * The Util module provides a function ##_.array() that converts a Minified list to a regular JavaScript array.
 */

/*$
 * @id promiseClass
 * @name Promise
 * @module WEB, UTIL
 * 
 * <i>Promises</i> are objects that represent the future result of an asynchronous operation. When you start such an operation, using #request#$.request(),
 * ##animate(), or ##wait(), you will get a Promise object that allows you to get the result as soon as the operation is finished.
 * 
 * Minified's full distribution ships with a <a href="http://promises-aplus.github.io/promises-spec/">Promises/A+</a>-compliant implementation of Promises that should
 * be able to interoperate with most other Promises implementations. Minified's Web module in stand-alone distribution comes with a limited implementation.
 * See below for details.
 * 
 * What may be somewhat surprising about this Promises specification is that the only standard-compliant way to access the result is to 
 * register callbacks. They will be invoked as soon as the operation is finished. 
 * If the operation already ended when you register the callbacks, the callback will then just be called from the event loop as soon
 * as possible (but never while the ##then() you register them with is still running).<br/>
 * This design forces you to handle the operation result asynchronously and disencourages 'bad' techniques such as polling.
 * 
 * The central method of a Promise, and indeed the only required function in Promises/A+, is ##then(). It allows you to register
 * two callback methods, one for success (called 'fulfillment' in Promises/A+ terminology) and one for failures (called 'rejection' in Promises/A+).
 * 
 * This example shows you how to use <var>then()</var>:
 * <pre>
 * $.request('get', 'http://example.com/weather?zip=90210')
 *  .then(function success(result) {
 *      alert('The weather is ' + result);
 *  }, function error(exception) {
 *  	alert('Something went wrong');
 *  });
 * </pre>
 * 
 * What makes Promises so special is that ##then() itself returns a new Promise, which is based on the Promise <var>then()</var> was called on, but can be
 * modified by the outcome of callbacks. Both arguments to <var>then()</var> are optional, and you can also write the code like this:
 * <pre>
 * $.request('get', 'http://example.com/weather?zip=90210')
 *  .then(function success(result) {
 *      alert('The weather is ' + result);
 *  })
 *  .then(null, function error(exception) {
 *  	alert('Something went wrong');
 *  });
 * </pre>
 * 
 * Because the first ##then() returns a new Promise based on the original Promise, the second <var>then()</var> will handle errors of the request just like 
 * the first one did. There is only one subtle difference in the second example: the error handler will not only be called if the request failed, 
 * but also when the request succeded but the success handler threw an exception. That's one of the two differences between the original Promise and 
 * the Promise returned by <var>then()</var>. Any exception thrown in a callback causes the new Promise to be in error state. 
 * 
 * Before I show you the second difference between the original Promise and the new Promise, let me make the example a bit more readable 
 * by using ##error(), which is not part of Promises/A+, but a simple extension by Minified. It just registers the failure callback without 
 * forcing you to specify <var>null</var> as first argument: 
 * <pre>
 * $.request('get', 'http://example.com/weather?zip=90210')
 *  .then(function success(result) {
 *      alert('The weather is ' + result);
 *  })
 *  .error(function error(exception) {  // error(callback) is equivalent to then(null, callback)
 *  	alert('Something went wrong');
 *  });
 * </pre>
 * 
 * A very powerful capability of Promises is that you can easily chain them. If a ##then() callback returns a value, the new Promise returned 
 * by <var>then()</var> will be marked as success (fulfilled) and this value is the result of the operation. If a callback returns a Promise, 
 * the new Promise will assume the state of the returned Promise. You can use the latter to create chains of asynchronous operations, 
 * but you still need only a single error handler for all of them and you do not need to nest functions to achieve this:
 * <pre>
 * $.request('get', 'http://example.com/zipcode?location=Beverly+Hills,+CA')
 *  .then(function(resultZip) {
 *      return $.request('get', 'http://example.com/weather', {zip: resultZip});
 *  })
 *  .then(function(resultWeather) {
 *      alert('The weather in Beverly Hills is ' + resultWeather);
 *  })
 *  .error(function(exception) {
 *  	alert('Something went wrong');
 *  });
 * </pre>
 *  
 * Only the full Minified distribution allows you to create promises yourself, using the ##promise() function. The Promises/A+ 
 * specification does not specify how to fulfill a promise, but in Minified's implementation every Promise object has a function <code>fire()</code>  
 * that needs to be called when the promise result is ready. It requires two arguments.
 * The first is a boolean, <var>true</var> for a successful operation and <var>false</var> for a failure. The second is an array or list containing the
 * arguments to call the corresponding ##then() handler with.
 * 
 * The following example is a function, similar to ##wait(), that returns a Promise which succeeds after the given amount 
 * of milliseconds has passed.
 * It then fulfills the promise with the number of milliseconds as argument. 
 * 
 * <pre>
 * function timeout(durationMs) {
 *		var p = _.promise();
 *		setTimeout(function() { p.fire(true, [durationMs]); }, durationMs);
 *		return p;
 * }
 * </pre>
 * Call it like this: 
 * <pre>
 * timeout(1000).then(function(ms) { window.alert(ms+ ' milliseconds have passed.'); });
 * </pre>
 * 
 * <h3>Limited Promises Implementation in Web module</h3>
 * If you use only the Web module, instead of the full implementation, the promises implementation is not fully Promises/A+ compliant. 
 * One major difference is that it does not allow you create promises yourself. The only way to get a promise in the Web module 
 * is from functions like ##animate() and ##request(). The other difference is that the interoperability with other promises frameworks 
 * is limited, even though it should be good enough most of the time.
 *
 * There are two things you may run into when you use Web's simplified implementation with a complete implementation:
 * <ol><li>The simplified implementation does not support recursive thenables. So when you register callbacks with ##then(), 
 * you can return a promise or a thenable, but only if that promise is not also returning a promise.</li>
 * <li>Many corner cases required by the Promises/A+ specification are not handled. When interoperating using 
 * reasonable implementations, you may never run into this, but Promises/A+ has detailed rules for things like ##then() 
 * methods implemented as dynamic getter and returning a new value on each invocation or throwing exceptions. If you need 
 * a water-proof implementation, you need to use the complete implementation in Minified's full package.</li></ol>
 */
/*$
 * @stop
 */

///#/snippet  webDocs

